[{"id":"fca295bb695a68e7c67ce2bdeb374374","title":"信息收集1","content":"信息收集-1CMS 指纹识别在线 cms 指纹识别：http://whatweb.bugscaner.com/look/\nWappalyzer：https://github.com/AliasIO/wappalyzer\nTideFinger 潮汐：http://finger.tidesec.net/\n云悉指纹：https://www.yunsee.cn/\nWhatWeb：GitHub – urbanadventurer&#x2F;WhatWeb: Next generation web scanner\n数字观星 Finger-P：https://fp.shuziguanxing.com/#/\n后端 - 闭源 - 配置不当 - 源码泄漏参考：https://www.secpulse.com/archives/124398.html\n备份：敏感目录文件扫描\nCVS：https://github.com/kost/dvcs-ripper\nGIT：https://github.com/lijiejie/GitHack\nSVN：https://github.com/callmefeifei/SvnHack\nDS_Store：https://github.com/lijiejie/ds_store_exp\ncomposer.json：php 中，composer.json, 它描述了组件的信息: 名称 , 描述 , 关键词 , 作者 , GitHub 仓库地址…\ngit 源码泄露，svn 源码泄露，hg 源码泄漏，网站备份压缩文件，WEB-INF&#x2F;web.xml 泄露，DS_Store 文件泄露，SWP 文件泄露，CVS 泄露，Bzr 泄露，GitHub 源码泄漏\n有些小公司，或者黑色产业，会使用网上的源码进行搭建自己的 app 等，对网上的源码进行比对\n站长服务中心 — 网络维护服务市场，身边的技术服务顾问 – 互站网\n什么是 JS 渗透测试？在 Javascript 中也存在变量和函数，当存在可控变量及函数调用即可参数漏洞\nJS 开发的 WEB 应用和 PHP，JAVA,NET 等区别在于即没有源代码，也可以通过浏览器的\n查看源代码获取真实的点。获取 URL，获取 JS 敏感信息，获取代码传参等，所以相当于\nJS 开发的 WEB 应用属于白盒测试（默认有源码参考），一般会在 JS 中寻找更多的 URL\n地址，在 JS 代码逻辑（加密算法，APIkey 配置，验证逻辑等）进行后期安全测试。\nJS 安全问题源码泄漏\n未授权访问 &#x3D; JS 里面分析更多的 URL 访问确定接口路径\n敏感 key 泄漏 &#x3D; JS 文件中可能配置了接口信息（云应用，短信，邮件，数据库等）\nAPI 接口安全 &#x3D;（代码中加密提交参数传递，更多的 URL 路径）\n手工分析模式：1，先用 network 2，用 wappalyzer 查看框架 3，只看 js（vue.js) 4,看 admin&#x2F;login 等这种 5,ctrl + shift +f 搜索获取价值信息。\n快速获取价值信息src&#x3D;\npath&#x3D;\nmethod&#x3D;”get”、method&#x3D;”post”\nhttp.get(“、http.post(“\n$.ajax\nhttp://service.httpget\nhttp://service.httppost\nJS 前端架构 — 半自动 Burp官方插件：JS Link Finder &amp; JS Miner\n第三方插件：HaE &amp; Unexpected_information\nUnexpected_information：https://github.com/ScriptKid-Beta/Unexpected_information\n用来标记请求包中的一些敏感信息、JS 接口和一些特殊字段，防止我们疏忽了一些数据包，使用它可能会有意外的收获信息。\nHaE：https://github.com/gh0stkey/HaE\n基于 BurpSuite 插件 JavaAPI 开发的请求高亮标记与信息提取的辅助型插件。该插件可以通过自定义正则的方式匹配响应报文或请求报文，可以自行决定符合该自定义正则匹配的相应请求是否需要高亮标记、信息提取。\nJS 网络扫描工具：JSFinder，URLFinder，ffuf-FUZZ，Packer-Fuzzer，Findsomething\n1，JSFinder: 一款用作快速在网站的 js 文件中提取 URL，子域名的工具。\nhttps://github.com/Threezh1/JSFinder\n2，URLFinder: 更专注于提取页面中的 JS 与 URL 链接，提取的数据更完善且可查看状态码、内容大小、标题等\nhttps://github.com/pingc0y/URLFinder\ntxtURLFinder.exe -u http://www.baidu.com -s all -m 23，ffuf-FUZZ：爆破找到更多的 js 文件分析更多的信息https://github.com/ffuf/ffuf\nhttps://wordlists.assetnote.io （下载字典网址）功能强大的模糊化工具，用它来 FUZZ 模糊化 js 文件。\ntxtffuf.exe -w 字典.txt -u &lt;域名&gt;/FUZZ -t 200 -of csv -o 2.csv4，Packer-Fuzzer：一款针对 Webpack 等前端打包工具所构造的网站进行快速、高效安全检测的扫描工具。\nhttps://github.com/rtcatc/Packer-Fuzzer\n5，Findsomething：从表现中 JS 中提取 URL 或者敏感数据（包括请求的资源、接口的 url，请求的 ip 和域名，泄漏的证件号、手机号、邮箱等信息。）\nhttps://github.com/momosecurity/FindSomething\n\n","slug":"信息收集1","date":"2025-05-16T12:51:46.055Z","categories_index":"基础知识","tags_index":"基础","author_index":"Hao"},{"id":"33a92f9ed251723a6f6350c703d02fa8","title":"抓包","content":"基础知识-抓包技术常用工具：burpsuite，charles （两工具可配合使用）\nCharles 破解网站\nhttps://www.zzzmode.com/mytools/charles\n自行百度，没啥可讲\n","slug":"抓包","date":"2025-05-16T12:49:58.517Z","categories_index":"基础知识","tags_index":"基础","author_index":"Hao"},{"id":"594eeda5be42f7149d59aeeccc66f0a2","title":"app base","content":"基础知识-APP架构APP 应用开发架构：\n1，原生（java）开发\n安卓一般使用 java 语言开发，当然也有使用 kotlin 语言进行开发。\n2，使用 H5 语言开发\nH5 页面可以在任何支持 HTML5 标准的浏览器上运行，无需针对不同的操作系统进行开发。\n易于传播：H5 页面可以通过链接分享，方便用户在社交媒体等平台上进行传播。\n开发成本低：相较于 App 和小程序，H5 页面的开发成本较低，因为可以使用一套代码实现跨平台访问\n3，使用 flutter 开发\nflutter 是谷歌推出的一款 UI 框架，使用 dart 语言进行开发，支持跨平台 weight 渲染直接操作硬件层，体验可媲美原生\n4，常规 Web 开发\nWeb App 软件开发简单来说，就是开发一个网站，然后加入 app 的壳，内容都是 app 内的网页展示，受制于网页技术本身，可实现的功能少，而且每次点开，几乎所有的内容都需要重新加载，所以反应速度慢，内容加载过多容易卡死，体验差\n1，APP - 开发架构 - 原生态 - IDEA\n安全影响：反编译 &amp; 抓包 &amp; 常规测试（逆向的角度去分析逻辑设计安全）\n2，APP - 开发框架 - H5&amp;Vue-HBuilderX\n安全影响：API&amp;JS 框架安全问题 &amp; js 前端测试\n3，WX - 小程序 - 开发架构 - Web 封装 - 平台\n安全影响：常规 web 安全测试\n4，WX - 小程序 - 开发框架 - H5&amp;Vue-HBuilderX\n安全影响：API&amp;JS 框架安全问题 &amp; JS 前端测试\n","slug":"app-base","date":"2025-05-16T12:47:59.079Z","categories_index":"基础知识","tags_index":"基础","author_index":"Hao"},{"id":"fce321c34fbbe2a41087759c5e15dc0b","title":"web搭建","content":"基础知识-WEB网页搭建常规化：\n\n原理：源码数据都在服务器中\n影响：使用常规的安全测试手法\n\n站库分离：\n\n原理：数据源码不在同一服务器上\n存储：其他服务器上 &amp; 云数据产品\n影响：数据被单独存放，能连接才可能影响数据\n\n前后端分类：\n\n原理：前端 js 框架，API 传输数据\n影响：1，前端页面大部分不存在漏洞 2，后端管理大部分不在同一域名 3，获得的权限有可能 1 不影响后端\n\n集成软件：\n\n原理：打包类集成化环境，权限配置或受控制\n影响：攻击者权限对比区别\n\nDocker 容器：\n\n原理：虚拟化技术独立磁盘空间，非真实物理环境\n\n影响：攻击者虚拟空间磁盘\n\n搭站平台：\n\n模式：1，托管 2，申请\n\n原理：利用别人域名模板建立\n\n影响：实质安全测试非资产目标\n\n\n纯静态：\n\n例子：大学学的 html 设计网页\n原理：数据没有传输性（js 传输不算）\n影响：无漏洞\n\n伪静态：动态为静态技术，伪装的静态\nWAF\n非嵌入型：\n\n硬件型：以硬件形式部署在链路中，支持多种部署方式，当串联到链路中可以拦截恶意流量，在旁路监听时只做记录不拦截（Imperva，天清 WAG 等）\n软件型：以软件形式安装在服务器上，可以直接检测服务器是否存在 webshell，是否有文件被创建等（安全狗，云锁，D 盾等）\n云 WAF：一般以反向代理的形式工作，通过配置 NS 或 CNAME 记录，使得对网站的请求报文优先经过 WAF 主机（阿里云云盾，腾讯云 WAF 等）\n\n嵌入式：\n网站内置的 WAF：直接嵌入在代码中，安全人员在可能受到攻击的地方增强一些安全防护代码，比如过滤敏感字符\nCDN\n\n原理：内容分发服务，提到访问速度\nOSS\n\nOSS\n\n原理：云存储服务，提高资源文件加载速度\n影响：资源单独存储，修复上传漏洞 文件解析不复存在 同时也会有 Accesskey 泄露安全问题影响：隐藏真实 ip\n\n反向代理\n\n原理：通过网络反向代理转发真实服务达到访问目的\n影响：访问目标只是一个代理，非真实应用服务器\n\n负载均衡\n\n原理：分摊到多个操作单元上进行执行，共同完成工作任务\n影响：有多个服务器记载服务，测试过程中存在多个目标情况\n\n","slug":"WEB网页搭建","date":"2025-05-16T12:33:20.573Z","categories_index":"基础知识","tags_index":"基础","author_index":"Hao"},{"id":"ff91b050b55d35fbf6b529d19370e282","title":"Http","content":"Http 和 Https数据包可以看此文章：https://www.runoob.com/w3cnote/http-vs-https.html\n","slug":"http-base","date":"2025-05-16T12:23:28.278Z","categories_index":"基础知识","tags_index":"基础","author_index":"Hao"},{"id":"46426c79fe8370cebf57bb63c792f570","title":"hello","content":"没有什么东西","slug":"hello","date":"2025-05-16T11:48:45.000Z","categories_index":"乱七八槽","tags_index":"乱七八糟","author_index":"Hao"},{"id":"9bb30c0c918f89cc2cd8ad7521e47e07","title":"概念名词","content":"概念名词1，域名域名（Domain Name）是互联网中用于标识网站的名称，它是一串易于记忆的字符，代替了复杂的 IP 地址，使用户能够更方便地访问互联网上的资源。域名通过将用户输入的文字转换为相应的 IP 地址，帮助用户定位和访问目标网站。‌例如：www.example.com\n\n顶级域名（TLD）‌：这是域名的最后一部分，例如 “.com”、“.net” 或 “.org”。顶级域名通常代表不同的组织类型或地域。\n二级域名（SLD）‌：紧接在顶级域名前的部分，例如 “example” 在 “example.com” 中就是二级域名。\n‌子域名‌：位于二级域名前面，用于进一步划分域名。例如 “blog.example.com” 中的 “blog” 就是子域名。\n\n域名发现对于安全测试的意义：某个主域的二级域名或者多级域名，在防御措施严密情况下无法直接拿下主域，那么就可以采用迂回战术拿下子域名，然后无限靠近主域。\n例如：www.xxxxx.com 主域不存在漏洞，并且防御措施严密。而二级域名 edu.xxxxx.com 存在漏洞，并且防护措施松散。\n里面就可能存在漏洞，加以利用可以突破到主站的权限。简单来说，多级域名收集的意义，就是一个网站找不到漏洞时，可以找跟它服务器相同的另一个多级域名上的漏洞，做旁路攻击。这就是旁站入侵。\n2，DNSDNS（Domain Name System）是互联网的一项核心服务，其主要功能是将方便记忆的域名（如 example.com）转换为计算机能够识别的 IP 地址（如 192.0.2.1）。这种映射关系使得用户无需记住复杂的数字地址，只需输入域名即可访问目标资源。\n本地 HOSTS 与 DNS 的关系本地 HOSTS 重定向解析 IP 地址，如果网络在解析 IP 地址的时候，ping 这个网站的时候，先到 hosts 文件去看看，有没有对域名对应的 IP 地址，没有的话再去 DNS 服务器上去解析。如果去绑定 IP 地址，可以用这个方法，或者修改 hosts 文件，就能让对方指到此 IP 地址上去，类似于钓鱼攻击。hosts 文件所在的位置：C：\\Windows\\System32\\drivers\\etc\\hosts\nlinux 文件所在位置：&#x2F;etc&#x2F;hosts\nCDN 是什么？与 DNS 的关系？CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。\nCDN 作用： 访问的时候找一个网络最好，通讯最快的节点，访问网络时是访问一个节点，用来解决访问速度。\nCDN 缺点： 由于有节点，访问网络时，请求的是一个节点，真实数据和网络相关核心不在节点上，节点相当于缓存。\n两者之间关系： 更改 DNS 服务器，就相当于有可能访问到另一个节点。\n常见的 DNS 攻击域名劫持通过采用黑客手段控制了域名管理密码和域名管理邮箱，然后将该域名的 NS 纪录指向到黑客可以控制的 DNS 服务器，然后通过在该 DNS 服务器上添加相应域名纪录，从而使网民访问该域名时，进入了黑客所指向的内容。\n缓存投毒利用控制 DNS 缓存服务器，把原本准备访问某网站的用户在不知不觉中带到黑客指向的其他网站上。\nDDOS 攻击一种攻击针对 DNS 服务器软件本身，通常利用 BIND 软件程序中的漏洞，导致 DNS 服务器崩溃或拒绝服务；另一种攻击的目标不是 DNS 服务器，而是利用 DNS 服务器作为中间的 “攻击放大器”，去攻击其它互联网上的主机，导致被攻击主机拒绝服务。\nDNS 欺骗DNS 欺骗就是攻击者冒充域名服务器的一种欺骗行为。\n3，HTTP 和 HTTPS 区别\n‌安全性‌：HTTP 是明文传输，HTTPS 通过加密保护数据。\n‌证书‌：HTTPS 需要 CA 颁发的证书，而 HTTP 不需要。\nHTTPS 由于加密和解密过程，可能比 HTTP 稍慢，但现代技术已大大缩小了这一差距。\n\n4，后门后门：可以理解为攻击者，在得到相关的非法入侵后，留下后门文件，便于下次进行操作，拿到权限。后门文件：网站后门 (webshell)，服务器后门等其他类型的后门。\n关于后门需要了解哪些？（玩法，免杀）玩法（要能够隐藏自己），免杀（网站有杀毒软件，大部分有杀后门功能，会检测并删除，免杀就是不被检测到）\n5，WEB网站源码：分脚本类型、分应用方向操作系统：windows、linux中间件（搭建平台）：apache、iis、tomcat、nginx 等数据库：access、mysql、mssql、oracle、sybase、db2、postsql 等\nWEB 相关安全漏洞\n1、SQL 注入\nSQL 注入攻击的核心在于让 Web 服务器执行攻击者期望的 SQL 语句，以便得到数据库中的感兴趣的数据或对数据库进行读取、修改、删除、插入等操作，达到其邪恶的目的。\n2、XSS 攻击\nXSS 攻击的核心是将可执行的前端脚本代码（一般为 JavaScript）植入到网页中，听起来比较拗口，用大白话说就是攻击者想让你的浏览器执行他写的 JS 代码\n3、CSRF 攻击\nCSRF，跨站请求伪造，其核心思想在于，在打开 A 网站的情况下，另开 Tab 页面打开恶意网站 B，此时在 B 页面的 “唆使” 下，浏览器发起一个对网站 A 的 HTTP 请求\n4、DDoS 攻击\nDDoS 全称 Distributed Denial of Service：分布式拒绝服务攻击。是拒绝服务攻击的升级版。拒绝攻击服务顾名思义，让服务不可用。\n5、DNS 劫持\n6、JSON 劫持\nJSON 是一种轻量级的数据交换格式，而劫持就是对数据进行窃取（或者应该称为打劫、拦截比较合适。恶意攻击者通过某些特定的手段，将本应该返回给用户的 JSON 数据进行拦截，转而将数据发送回给恶意攻击者\n7、暴力破解\n8、信息泄露\n由于 Web 服务器或应用程序没有正确处理一些特殊请求，泄露 Web 服务器的一些敏感信息，如用户名、密码、源代码、服务器信息、配置信息等。\n9、目录遍历漏洞\n攻击者向 Web 服务器发送请求，通过在 URL 中或在有特殊意义的目录中附加 ..&#x2F;、或者附加 ..&#x2F; 的一些变形（如 ..\\ 或 ..&#x2F;&#x2F; 甚至其编码），导致攻击者能够访问未授权的目录，以及在 Web 服务器的根目录以外执行命令。\n10，命令执行漏洞\n命令执行漏洞是通过 URL 发起请求，在 Web 服务器端执行未授权的命令，获取系统信息、篡改系统配置、控制整个系统、使系统瘫痪等。\n11、文件上传漏洞\n如果对文件上传路径变量过滤不严，并且对用户上传的文件后缀以及文件类型限制不严，攻击者可通过 Web 访问的目录上传任意文件，包括网站后门文件（webshell），进而远程控制网站服务器。\n12、其他漏洞\nSSLStrip 攻击OpenSSL Heartbleed 安全漏洞CCS 注入漏洞证书有效性验证漏洞13、业务漏洞\n一般业务漏洞是跟具体的应用程序相关，比如参数篡改（连续编号 ID &#x2F; 订单、1 元支付）、重放攻击（伪装支付）、权限控制（越权操作）等。\n14、框架或应用漏洞\n15，XEE 漏洞\nXXE 漏洞全称 XML External Entity Injection 即 xml 外部实体注入漏洞，XXE 漏洞发生在应用程序解析 XML 输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起 Dos 攻击等危害。\n","slug":"Concept-name","date":"2025-05-16T10:42:06.923Z","categories_index":"基础知识","tags_index":"基础","author_index":"Hao"}]