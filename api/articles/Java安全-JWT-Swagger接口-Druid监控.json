{"title":"Java安全-JWT,Swagger接口,Druid监控","uid":"da36a803c898cd4beb62fc9c5e9299ef","slug":"Java安全-JWT-Swagger接口-Druid监控","date":"2025-05-17T07:19:36.267Z","updated":"2025-05-17T12:08:18.133Z","comments":true,"path":"api/articles/Java安全-JWT-Swagger接口-Druid监控.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/1b422368462a46b8eeab963766d5d75d.jpg","content":"<h1 id=\"Java安全-JWT-Swagger-接口-Druid-监控\"><a href=\"#Java安全-JWT-Swagger-接口-Druid-监控\" class=\"headerlink\" title=\"Java安全-JWT,Swagger 接口,Druid 监控\"></a>Java安全-JWT,Swagger 接口,Druid 监控</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1，Java 安全 - Druid 监控 - 未授权访问 &amp; 信息泄漏<br>2，Java 安全 - Swagger 接口 - 导入 &amp; 联动批量测试<br>3，Java 安全 - JWT 令牌 - 空算法 &amp; 未签名 &amp; 密匙提取</p></blockquote>\n<h2 id=\"Java-安全-Druid-监控-未授权访问-信息泄漏\"><a href=\"#Java-安全-Druid-监控-未授权访问-信息泄漏\" class=\"headerlink\" title=\"Java 安全 - Druid 监控 - 未授权访问 &amp; 信息泄漏\"></a>Java 安全 - Druid 监控 - 未授权访问 &amp; 信息泄漏</h2><p>参考：<a href=\"https://developer.aliyun.com/article/1260382\">https://developer.aliyun.com/article/1260382</a><br>Druid 是阿里巴巴数据库事业部出品，为监控而生的数据库连接池。Druid 提供的监控<br>功能，监控 SQL 的执行时间、监控 Web URI 的请求、Session 监控。当开发者配置不<br>当时就可能造成未授权访问漏洞。<br>攻击点：<br>1、直接拼接 URL 路径，尝试能否直接未授权访问系统功能点。<br>2、结合泄露 URL 路径和 Session 信息，利用 BurpSuite 进行尝试登录。<br>3、利用 Cookie 编辑器替换 Session，再次访问后台路径尝试进入后台。</p>\n<p>利用方法：</p>\n<p>通过目录扫描或手工输入路径 <a href=\"http://www.xxxx.com/druid/index.html%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%AD%98%E5%9C%A8\">http://www.xxxx.com/druid/index.html，发现存在</a> Druid 未授权访问页面，重点关注 URL 监控和 Session 监控页面；</p>\n<h2 id=\"Java-安全-Swagger-接口-导入-联动批量测试\"><a href=\"#Java-安全-Swagger-接口-导入-联动批量测试\" class=\"headerlink\" title=\"Java 安全 - Swagger 接口 - 导入 &amp; 联动批量测试\"></a>Java 安全 - Swagger 接口 - 导入 &amp; 联动批量测试</h2><p>Swagger 是一个用于生成、描述和调用 RESTful 接口的 Web 服务。就是将项目中所有<br>（想要暴露的）接口展现在页面上，并可以进行接口调用和测试的服务。所以可以对这个<br>接口进行漏洞测试，看是否存在未授权访问、sql 注入、文件上传等漏洞。由于接口太<br>多，一个个接口测试的话太费时间，所以一般会采用自动化接口漏洞安全测试。</p>\n<p>访问：<a href=\"http://ip:port/swagger-ui.html\">http://ip:port/swagger-ui.html</a><br>1、自动化发包测试<br>Postman：<a href=\"https://github.com/hlmd/Postman-cn\">https://github.com/hlmd/Postman-cn</a><br>2、自动化漏洞测试<br>联动 BurpSuite Xray 等</p>\n<h2 id=\"Java-安全-JWT-令牌-空算法-未签名-密匙获取\"><a href=\"#Java-安全-JWT-令牌-空算法-未签名-密匙获取\" class=\"headerlink\" title=\"Java 安全 - JWT 令牌 - 空算法 &amp; 未签名 &amp; 密匙获取\"></a>Java 安全 - JWT 令牌 - 空算法 &amp; 未签名 &amp; 密匙获取</h2><p>JSON Web Token (JWT)。它遵循 JSON 格式，将用户信息加密到 token 里，服务器不<br>保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证 token，通过 token<br>验证用户身份。基于 token 的身份验证可以替代传统的 cookie+session 身份验证方<br>法。这使得 JWT 成为高度分布式网站的热门选择，在这些网站中，用户需要与多个后端<br>服务器无缝交互</p>\n<p><a href=\"https://jwt.io/\">https://jwt.io</a></p>\n<p>1、标头（Header）</p>\n<p>alg 字段通常用于表示加密采用的算法。如”HS256″、”RS256″等</p>\n<p>typ 字段通常用于表示类型</p>\n<p>2，有效载荷（Payload）</p>\n<p>Payload 是 JWT 的第二个部分，这是一个 JSON 对象，主要承载了各种声明并传递明文</p>\n<p>数据，用于存储用户的信息，如 id、用户名、角色、令牌生成时间和其他自定义声明。</p>\n<p>3，签名（Signature）</p>\n<p>使用 “alg”: “none” 时，签名部分为空，直接以 . 结尾。</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-42-1024x356.png\"></p>\n<p>一，空算法：</p>\n<p>当 alg 为 none 时没有加密算法</p>\n<p>可直接更改 Payload 中的信息并重新生成 base64 的编码发送</p>\n<p>二，未签名</p>\n<p>有些服务器并未验证 jwt 签名，可以直接尝试修改 payload，或者删除 Signature</p>\n<p>三，暴力破解密钥</p>\n<p>某些签名算法，例如 HS256 (HMAC+SHA-256)，会像密码一样使用一个任意的、独立的字符串作为秘密密钥。这个秘钥如被轻易猜到或暴力破解，则攻击者能以任意的头部和载荷值来创建 JT，然后用密钥重新给令牌签名。</p>\n<p>四，源码泄露密钥</p>\n","text":"Java安全-JWT,Swagger 接口,Druid 监控 1，Java 安全 - Druid 监控 - 未授权访问 & 信息泄漏2，Java 安全 - Sw...","permalink":"/post/Java安全-JWT-Swagger接口-Druid监控","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/tags/Java安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%AE%89%E5%85%A8-JWT-Swagger-%E6%8E%A5%E5%8F%A3-Druid-%E7%9B%91%E6%8E%A7\"><span class=\"toc-text\">Java安全-JWT,Swagger 接口,Druid 监控</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E5%AE%89%E5%85%A8-Druid-%E7%9B%91%E6%8E%A7-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E4%BF%A1%E6%81%AF%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">Java 安全 - Druid 监控 - 未授权访问 &amp; 信息泄漏</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E5%AE%89%E5%85%A8-Swagger-%E6%8E%A5%E5%8F%A3-%E5%AF%BC%E5%85%A5-%E8%81%94%E5%8A%A8%E6%89%B9%E9%87%8F%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">Java 安全 - Swagger 接口 - 导入 &amp; 联动批量测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E5%AE%89%E5%85%A8-JWT-%E4%BB%A4%E7%89%8C-%E7%A9%BA%E7%AE%97%E6%B3%95-%E6%9C%AA%E7%AD%BE%E5%90%8D-%E5%AF%86%E5%8C%99%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">Java 安全 - JWT 令牌 - 空算法 &amp; 未签名 &amp; 密匙获取</span></a></li></ol></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java安全-反序列化","uid":"834d897a9474839bf32abbfb577a6009","slug":"Java安全-反序列化","date":"2025-05-17T07:23:49.990Z","updated":"2025-05-17T07:44:50.053Z","comments":true,"path":"api/articles/Java安全-反序列化.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%23march7%20%23m7%20%23honkaistarrail%20%23hsr.jpg","text":"Java安全-反序列化Java 安全 - 反序列化 - 原生序列化类函数序列化是将 Java 对象转换成字节流的过程。而反序列化是将字节流转换成 Java 对象...","permalink":"/post/Java安全-反序列化","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/tags/Java安全.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}},"next_post":{"title":"Java安全-RCE执行,JNDI注入","uid":"405d1bcee462f9653e9b6caa35fc018c","slug":"Java安全-RCE执行-JNDI注入","date":"2025-05-17T07:15:45.005Z","updated":"2025-05-17T12:08:47.864Z","comments":true,"path":"api/articles/Java安全-RCE执行-JNDI注入.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/1bd6f8ce-0ae6-4e42-8a66-2563b9971118.jpg","text":"Java安全-RCE执行,JNDI注入Java 安全 - RCE 执行 - 5 大类函数调用-Groovy -RuntimeExec -ProcessImpl ...","permalink":"/post/Java安全-RCE执行-JNDI注入","photos":[],"count_time":{"symbolsCount":925,"symbolsTime":"1 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/tags/Java安全.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}}}