{"title":"JavaEE-拦截器和过滤器","uid":"6a0096bd641aa89e7faa8db26f66389c","slug":"Java-过滤器","date":"2025-05-17T06:46:19.943Z","updated":"2025-05-17T07:44:32.837Z","comments":true,"path":"api/articles/Java-过滤器.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/5b7d348c994a936d0558f984b4876189.jpg","content":"<h1 id=\"JavaEE-拦截器和过滤器\"><a href=\"#JavaEE-拦截器和过滤器\" class=\"headerlink\" title=\"JavaEE-拦截器和过滤器\"></a>JavaEE-拦截器和过滤器</h1><h2 id=\"过滤器（Filter）：\"><a href=\"#过滤器（Filter）：\" class=\"headerlink\" title=\"过滤器（Filter）：\"></a>过滤器（Filter）：</h2><p>过滤器 JavaWeb 三大组件之一，它与 Servlet 很相似！过滤器是用来拦截请求的，而不是处理请求的。</p>\n<p>当用户请求某个 Servlet 时，会先执行部署在这个请求上的 Filter，如果 Filter “放行”，那么会继承执行用户请求的 Servlet；如果 Filter 不 “放行”，那么就不会执行用户请求的 Servlet。</p>\n<p>其实可以这样理解，当用户请求某个 Servlet 时，Tomcat 会去执行注册在这个请求上的 Filter，然后是否 “放行” 由 Filter 来决定。可以理解为，Filter 来决定是否调用 Servlet！当执行完成 Servlet 的代码后，还会执行 Filter 后面的代码。</p>\n<p>一，拦截资源路径</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F6F6F4\">@</span><span style=\"color: #97E1F1; font-style: italic\">WebServlet</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">/*</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">)   </span><span style=\"color: #7B7F8B\">//以注解的形式</span></span></code></pre></div><p>二，资源放行</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F6F6F4\">filterChain.</span><span style=\"color: #62E884\">doFilter</span><span style=\"color: #F6F6F4\">(servletRequest, servletResponse);</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F286C4\">package</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">com.example.filter</span><span style=\"color: #F6F6F4\">;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\"> </span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.</span><span style=\"color: #BF9EEE; font-style: italic\">*</span><span style=\"color: #F6F6F4\">;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.annotation.WebServlet;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> java.io.IOException;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\"> </span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">@</span><span style=\"color: #97E1F1; font-style: italic\">WebServlet</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">/*</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">)   </span><span style=\"color: #7B7F8B\">//拦截所有资源路径</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">class</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1\">Filter</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">implements</span><span style=\"color: #F6F6F4\"> javax.servlet.</span><span style=\"color: #97E1F1; font-style: italic\">Filter</span><span style=\"color: #F6F6F4\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    @</span><span style=\"color: #97E1F1; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">void</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">init</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #97E1F1; font-style: italic\">FilterConfig</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #FFB86C; font-style: italic\">filterConfig</span><span style=\"color: #F6F6F4\">) </span><span style=\"color: #F286C4\">throws</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">ServletException</span><span style=\"color: #F6F6F4\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        System.out.</span><span style=\"color: #62E884\">println</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">init filter</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\"> </span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    @</span><span style=\"color: #97E1F1; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">void</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">doFilter</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #97E1F1; font-style: italic\">ServletRequest</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #FFB86C; font-style: italic\">servletRequest</span><span style=\"color: #F6F6F4\">, </span><span style=\"color: #97E1F1; font-style: italic\">ServletResponse</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #FFB86C; font-style: italic\">servletResponse</span><span style=\"color: #F6F6F4\">, </span><span style=\"color: #97E1F1; font-style: italic\">FilterChain</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #FFB86C; font-style: italic\">filterChain</span><span style=\"color: #F6F6F4\">) </span><span style=\"color: #F286C4\">throws</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">IOException</span><span style=\"color: #F6F6F4\">, </span><span style=\"color: #97E1F1; font-style: italic\">ServletException</span><span style=\"color: #F6F6F4\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        System.out.</span><span style=\"color: #62E884\">println</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">正在拦截</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        </span><span style=\"color: #7B7F8B\">//资源放行</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        filterChain.</span><span style=\"color: #62E884\">doFilter</span><span style=\"color: #F6F6F4\">(servletRequest, servletResponse);</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\"> </span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    @</span><span style=\"color: #97E1F1; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">void</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">destroy</span><span style=\"color: #F6F6F4\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        System.out.</span><span style=\"color: #62E884\">println</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">destroy filter</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">&#125;</span></span></code></pre></div><h3 id=\"过滤器应用场景\"><a href=\"#过滤器应用场景\" class=\"headerlink\" title=\"过滤器应用场景\"></a>过滤器应用场景</h3><p>1， 执行目标资源之前做预处理工作，例如设置编码，这种试通常都会放行，只是在目标资源执行之前做一些准备工作；</p>\n<p>2，通过条件判断是否放行，例如校验当前用户是否已经登录，或者用户 IP 是否已经被禁用；</p>\n<p>3，在目标资源执行后，做一些后续的特殊处理工作，例如把目标资源输出的数据进行处理；</p>\n<h2 id=\"监听器（Listen）\"><a href=\"#监听器（Listen）\" class=\"headerlink\" title=\"监听器（Listen）\"></a>监听器（Listen）</h2><p>监听 ServletContext，HttpSession，ServletRequest 等域对象创建和销毁事件</p>\n<p>监听域对象的属性发生修改的事件<br>监听 ServletContext，HttpSession，ServletRequest 等域对象创建和销毁事件</p>\n<p>监听域对象的属性发生修改的事件</p>\n<p>用途：</p>\n<ul>\n<li>统计在线人数和用户</li>\n<li>系统启动的时候加载初始化信息</li>\n<li>统计网站的访问量</li>\n<li>和 Spring 结合</li>\n<li>监听器分类：<br>监听器分类：</li>\n</ul>\n<p>（1）第一类：按照被监听的对象划分：ServletContext 域、ServletRequest 域、HttpSession 域。<br>（2）第二类：监听的内容划分：监听域对象的创建与销毁的监听域对象的属性变化的。</p>\n<p><strong>ServletContextListener</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F286C4\">package</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">zzs.listener</span><span style=\"color: #F6F6F4\">;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.ServletContextEvent;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.ServletContextListener;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\"> </span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">@</span><span style=\"color: #97E1F1; font-style: italic\">WebListener</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">class</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1\">FirstServletContextListener</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">implements</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">ServletContextListener</span><span style=\"color: #F6F6F4\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    @</span><span style=\"color: #97E1F1; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">void</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">contextInitialized</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #97E1F1; font-style: italic\">ServletContextEvent</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #FFB86C; font-style: italic\">servletContextEvent</span><span style=\"color: #F6F6F4\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        System.out.</span><span style=\"color: #62E884\">println</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">servletcontext初始化了</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\"> </span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    @</span><span style=\"color: #97E1F1; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">void</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">contextDestroyed</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #97E1F1; font-style: italic\">ServletContextEvent</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #FFB86C; font-style: italic\">servletContextEvent</span><span style=\"color: #F6F6F4\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        System.out.</span><span style=\"color: #62E884\">println</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">servletcontext销毁了</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">&#125;</span></span></code></pre></div><p><strong>HttpSessionListener</strong></p>\n<p> 监听 Httpsession 域的创建于销毁的监听器 HttpSessionListener。<br>  HttpSession 对象的生命周期：<br>  （1）创建：第一次调用 request.getSession 时创建。<br>  （2）销毁：服务器关闭销毁 session 过期手动销毁。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula-soft\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F286C4\">package</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">zzs.listener</span><span style=\"color: #F6F6F4\">;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.ServletContextEvent;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.ServletContextListener;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.annotation.WebListener;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.http.HttpSessionAttributeListener;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.http.HttpSessionEvent;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.http.HttpSessionListener;</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">import</span><span style=\"color: #F6F6F4\"> javax.servlet.http.HttpSessionBindingEvent;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\"> </span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">@</span><span style=\"color: #97E1F1; font-style: italic\">WebListener</span><span style=\"color: #F6F6F4\">()</span></span>\n<span class=\"line\"><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">class</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1\">FirstHttpSessionListener</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #F286C4\">implements</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">HttpSessionListener</span><span style=\"color: #F6F6F4\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">FirstHttpSessionListener</span><span style=\"color: #F6F6F4\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">void</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">sessionCreated</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #97E1F1; font-style: italic\">HttpSessionEvent</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #FFB86C; font-style: italic\">se</span><span style=\"color: #F6F6F4\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        System.out.</span><span style=\"color: #62E884\">println</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">session创建id:</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F286C4\">+</span><span style=\"color: #F6F6F4\">se.</span><span style=\"color: #62E884\">getSession</span><span style=\"color: #F6F6F4\">().</span><span style=\"color: #62E884\">getId</span><span style=\"color: #F6F6F4\">());</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    </span><span style=\"color: #F286C4\">public</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #97E1F1; font-style: italic\">void</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #62E884\">sessionDestroyed</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #97E1F1; font-style: italic\">HttpSessionEvent</span><span style=\"color: #F6F6F4\"> </span><span style=\"color: #FFB86C; font-style: italic\">se</span><span style=\"color: #F6F6F4\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">        System.out.</span><span style=\"color: #62E884\">println</span><span style=\"color: #F6F6F4\">(</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #E7EE98\">session销毁</span><span style=\"color: #DEE492\">&quot;</span><span style=\"color: #F6F6F4\">);</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F6F6F4\">&#125;</span></span></code></pre></div><p><strong>ServletRequestListener</strong></p>\n<p>  ServletRequestlistener 监听 ServletRequest 域创建与销毁的监听器 ServletRequestListener<br>  ServletRequest 的生命周期<br>  （1）创建：每一次请求都会创建 request<br>  （2）销毁：请求结束</p>\n","text":"JavaEE-拦截器和过滤器过滤器（Filter）：过滤器 JavaWeb 三大组件之一，它与 Servlet 很相似！过滤器是用来拦截请求的，而不是处理请求的...","permalink":"/post/Java-过滤器","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaEE-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">JavaEE-拦截器和过滤器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%88Filter%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">过滤器（Filter）：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">过滤器应用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%88Listen%EF%BC%89\"><span class=\"toc-text\">监听器（Listen）</span></a></li></ol></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JavaEE-JDBC","uid":"5266ba7c44bc6a4ce52e58d685fe4590","slug":"JavaEE-JDBC","date":"2025-05-17T06:54:49.885Z","updated":"2025-05-17T07:45:18.315Z","comments":true,"path":"api/articles/JavaEE-JDBC.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/5b7d348c994a936d0558f984b4876189%281%29.jpg","text":"JavaEE-JDBC什么是 JDBC？Java 数据库连接，（Java Database Connectivity，简称 JDBC）是 Java 语言中用来规...","permalink":"/post/JavaEE-JDBC","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}},"next_post":{"title":"JavaEE应用-Servlet","uid":"9116ce8cd7513e24b93bb0c7493010d2","slug":"JavaEE应用-Servlet","date":"2025-05-16T15:14:11.789Z","updated":"2025-05-17T07:45:31.036Z","comments":true,"path":"api/articles/JavaEE应用-Servlet.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%23changli%20%23wutheringwaves%20%23wuwa.jpg","text":"JavaEE应用-ServletJavaEE 基础一：Servlet 实现继承抽象类 HttpServlet 的重写部分方法（常用） 添加注解 @WebServ...","permalink":"/post/JavaEE应用-Servlet","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}}}