{"title":"JavaEE-拦截器和过滤器","uid":"6a0096bd641aa89e7faa8db26f66389c","slug":"Java-过滤器","date":"2025-05-17T06:46:19.943Z","updated":"2025-05-17T07:44:32.837Z","comments":true,"path":"api/articles/Java-过滤器.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/5b7d348c994a936d0558f984b4876189.jpg","content":"<h1 id=\"JavaEE-拦截器和过滤器\"><a href=\"#JavaEE-拦截器和过滤器\" class=\"headerlink\" title=\"JavaEE-拦截器和过滤器\"></a>JavaEE-拦截器和过滤器</h1><h2 id=\"过滤器（Filter）：\"><a href=\"#过滤器（Filter）：\" class=\"headerlink\" title=\"过滤器（Filter）：\"></a>过滤器（Filter）：</h2><p>过滤器 JavaWeb 三大组件之一，它与 Servlet 很相似！过滤器是用来拦截请求的，而不是处理请求的。</p>\n<p>当用户请求某个 Servlet 时，会先执行部署在这个请求上的 Filter，如果 Filter “放行”，那么会继承执行用户请求的 Servlet；如果 Filter 不 “放行”，那么就不会执行用户请求的 Servlet。</p>\n<p>其实可以这样理解，当用户请求某个 Servlet 时，Tomcat 会去执行注册在这个请求上的 Filter，然后是否 “放行” 由 Filter 来决定。可以理解为，Filter 来决定是否调用 Servlet！当执行完成 Servlet 的代码后，还会执行 Filter 后面的代码。</p>\n<p>一，拦截资源路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/*&quot;)</span>   <span class=\"comment\">//以注解的形式</span></span><br></pre></td></tr></table></figure>\n<p>二，资源放行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">filterChain.doFilter(servletRequest, servletResponse);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.filter;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/*&quot;)</span>   <span class=\"comment\">//拦截所有资源路径</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Filter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">javax</span>.servlet.Filter &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;init filter&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;正在拦截&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//资源放行</span></span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;destroy filter&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过滤器应用场景\"><a href=\"#过滤器应用场景\" class=\"headerlink\" title=\"过滤器应用场景\"></a>过滤器应用场景</h3><p>1， 执行目标资源之前做预处理工作，例如设置编码，这种试通常都会放行，只是在目标资源执行之前做一些准备工作；</p>\n<p>2，通过条件判断是否放行，例如校验当前用户是否已经登录，或者用户 IP 是否已经被禁用；</p>\n<p>3，在目标资源执行后，做一些后续的特殊处理工作，例如把目标资源输出的数据进行处理；</p>\n<h2 id=\"监听器（Listen）\"><a href=\"#监听器（Listen）\" class=\"headerlink\" title=\"监听器（Listen）\"></a>监听器（Listen）</h2><p>监听 ServletContext，HttpSession，ServletRequest 等域对象创建和销毁事件</p>\n<p>监听域对象的属性发生修改的事件<br>监听 ServletContext，HttpSession，ServletRequest 等域对象创建和销毁事件</p>\n<p>监听域对象的属性发生修改的事件</p>\n<p>用途：</p>\n<ul>\n<li>统计在线人数和用户</li>\n<li>系统启动的时候加载初始化信息</li>\n<li>统计网站的访问量</li>\n<li>和 Spring 结合</li>\n<li>监听器分类：<br>监听器分类：</li>\n</ul>\n<p>（1）第一类：按照被监听的对象划分：ServletContext 域、ServletRequest 域、HttpSession 域。<br>（2）第二类：监听的内容划分：监听域对象的创建与销毁的监听域对象的属性变化的。</p>\n<p><strong>ServletContextListener</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> zzs.listener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContextEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContextListener;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@WebListener</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstServletContextListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ServletContextListener</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextInitialized</span><span class=\"params\">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;servletcontext初始化了&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextDestroyed</span><span class=\"params\">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;servletcontext销毁了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>HttpSessionListener</strong></p>\n<p> 监听 Httpsession 域的创建于销毁的监听器 HttpSessionListener。<br>  HttpSession 对象的生命周期：<br>  （1）创建：第一次调用 request.getSession 时创建。<br>  （2）销毁：服务器关闭销毁 session 过期手动销毁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> zzs.listener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContextEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContextListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSessionAttributeListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSessionBindingEvent;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@WebListener()</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstHttpSessionListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpSessionListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FirstHttpSessionListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sessionCreated</span><span class=\"params\">(HttpSessionEvent se)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;session创建id:&quot;</span>+se.getSession().getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sessionDestroyed</span><span class=\"params\">(HttpSessionEvent se)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;session销毁&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>ServletRequestListener</strong></p>\n<p>  ServletRequestlistener 监听 ServletRequest 域创建与销毁的监听器 ServletRequestListener<br>  ServletRequest 的生命周期<br>  （1）创建：每一次请求都会创建 request<br>  （2）销毁：请求结束</p>\n","text":"JavaEE-拦截器和过滤器过滤器（Filter）：过滤器 JavaWeb 三大组件之一，它与 Servlet 很相似！过滤器是用来拦截请求的，而不是处理请求的...","permalink":"/post/Java-过滤器","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaEE-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">JavaEE-拦截器和过滤器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%88Filter%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">过滤器（Filter）：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">过滤器应用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%88Listen%EF%BC%89\"><span class=\"toc-text\">监听器（Listen）</span></a></li></ol></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JavaEE-JDBC","uid":"5266ba7c44bc6a4ce52e58d685fe4590","slug":"JavaEE-JDBC","date":"2025-05-17T06:54:49.885Z","updated":"2025-05-17T07:45:18.315Z","comments":true,"path":"api/articles/JavaEE-JDBC.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/5b7d348c994a936d0558f984b4876189%281%29.jpg","text":"JavaEE-JDBC什么是 JDBC？Java 数据库连接，（Java Database Connectivity，简称 JDBC）是 Java 语言中用来规...","permalink":"/post/JavaEE-JDBC","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}},"next_post":{"title":"JavaEE应用-Servlet","uid":"9116ce8cd7513e24b93bb0c7493010d2","slug":"JavaEE应用-Servlet","date":"2025-05-16T15:14:11.789Z","updated":"2025-05-17T07:45:31.036Z","comments":true,"path":"api/articles/JavaEE应用-Servlet.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%23changli%20%23wutheringwaves%20%23wuwa.jpg","text":"JavaEE应用-ServletJavaEE 基础一：Servlet 实现继承抽象类 HttpServlet 的重写部分方法（常用） 添加注解 @WebServ...","permalink":"/post/JavaEE应用-Servlet","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}}}