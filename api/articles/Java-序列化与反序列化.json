{"title":"JavaEE-序列化和反序列化","uid":"83b6c2550820553f88f46482ca935e4b","slug":"Java-序列化与反序列化","date":"2025-05-17T07:05:36.238Z","updated":"2025-05-17T07:44:26.419Z","comments":true,"path":"api/articles/Java-序列化与反序列化.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/5a2feebf-6337-4e42-bbe7-5fe43ef7aca4.jpg","content":"<h1 id=\"Java-序列化与反序列化\"><a href=\"#Java-序列化与反序列化\" class=\"headerlink\" title=\"Java-序列化与反序列化\"></a>Java-序列化与反序列化</h1><p>序列化和反序列化的应用：</p>\n<p>两个进程在远程通信时，可以发送多种数据，包括文本、图片、音频、视频等，这些数据都是以二进制序列的形式在网络上传输。</p>\n<p>java 是面向对象的开发方式，一切都是 java 对象，想要在网络中传输 java 对象，可以使用序列化和反序列化去实现，发送发需要将 java 对象转换为字节序列，然后在网络上传送，接收方收到字符序列后，会通过反序列化将字节序列恢复成 java 对象。</p>\n<p>java 序列化的优点：</p>\n<ul>\n<li>实现了数据的持久化，通过序列化可以把数据持久地保存在硬盘上 (磁盘文件)。</li>\n<li>利用序列化实现远程通信，在网络上传输字节序列</li>\n</ul>\n<p><strong>原生序列化操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;haohao&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">14</span>);</span><br><span class=\"line\">        System.out.println(p);</span><br><span class=\"line\">        SerializableDeamo(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">SerializableDeamo</span><span class=\"params\">(Person obj)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//FileOutputStream()输出文件</span></span><br><span class=\"line\">        <span class=\"comment\">//将对象obj序列化后输出到文件person.txt</span></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;person.txt&quot;</span>));</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Person.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String years;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age, <span class=\"type\">int</span> years)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = years;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; &quot;</span> + age + <span class=\"string\">&quot; &quot;</span> + years);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Name: &quot;</span> + name + <span class=\"string\">&quot; Age: &quot;</span> + age + <span class=\"string\">&quot; Years: &quot;</span> + age;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>反序列化:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnserializableDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> unserializeTest(<span class=\"string\">&quot;person.txt&quot;</span>);</span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">unserializeTest</span><span class=\"params\">(String filename)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filename))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ois.readObject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","text":"Java-序列化与反序列化序列化和反序列化的应用： 两个进程在远程通信时，可以发送多种数据，包括文本、图片、音频、视频等，这些数据都是以二进制序列的形式在网络上...","permalink":"/post/Java-序列化与反序列化","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java-%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">Java-序列化与反序列化</span></a></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"个人网络安全博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java-JNDI","uid":"35d0606ce30ad44ccc65a3edcc603a2c","slug":"Java-JNDI","date":"2025-05-17T07:08:06.640Z","updated":"2025-05-17T07:44:19.355Z","comments":true,"path":"api/articles/Java-JNDI.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/4ed9d560-46f5-46ae-bf0a-04336ba9eb7b.jpg","text":"Java-JNDIJNDI 是什么JNDI（Java Naming and Directory Interface）是一个应用程序设计的 API，一种标准的 J...","permalink":"/post/Java-JNDI","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"个人网络安全博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaEE-JDBC","uid":"5266ba7c44bc6a4ce52e58d685fe4590","slug":"JavaEE-JDBC","date":"2025-05-17T06:54:49.885Z","updated":"2025-05-17T07:45:18.315Z","comments":true,"path":"api/articles/JavaEE-JDBC.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/5b7d348c994a936d0558f984b4876189%281%29.jpg","text":"JavaEE-JDBC什么是 JDBC？Java 数据库连接，（Java Database Connectivity，简称 JDBC）是 Java 语言中用来规...","permalink":"/post/JavaEE-JDBC","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Java基础知识","slug":"Java基础知识","count":5,"path":"api/categories/Java基础知识.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":5,"path":"api/tags/Java基础.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"个人网络安全博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}