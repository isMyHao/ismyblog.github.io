{"title":"Js逆向","uid":"38398170e5e634f3f46b2c1de62b6b21","slug":"JS逆向","date":"2025-05-17T07:52:28.669Z","updated":"2025-05-17T08:37:37.449Z","comments":true,"path":"api/articles/JS逆向.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/Follow%20me%20for%20more%21%20%23genshin%20%23genshinimpact.jpg","content":"<h1 id=\"Js逆向\"><a href=\"#Js逆向\" class=\"headerlink\" title=\"Js逆向\"></a>Js逆向</h1><h2 id=\"JS-分析调试：\"><a href=\"#JS-分析调试：\" class=\"headerlink\" title=\"JS 分析调试：\"></a>JS 分析调试：</h2><p><strong>1，代码的全局搜索</strong></p>\n<p>通过数据包找到关键词，并搜索</p>\n<p><strong>2，文件流程断点</strong><br><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-20-1024x190.png\"></p>\n<p>找到对应数据包<br><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-21-1024x197.png\"></p>\n<p>在发起程序中，显示了执行 js 的流程，从下往上执行的</p>\n<p>查看 Login js 中的代码，为登录代码</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-22-1024x442.png\"></p>\n<p>下个断点，当点击登录时，代码运行此处会暂停</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-23-1024x94.png\"></p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-24-1024x255.png\"></p>\n<p>将鼠标放在 logindata 变量上</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-25-1024x310.png\"></p>\n<p>显示了加密信息</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-26.png\"></p>\n<p>在作用域中查看信息，发现加密信息是在 login 和 ajax 中完成的</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-27-1024x299.png\"><br>上面的代码中显示了加密代码</p>\n<p>点击 encrypt.encrypt () 发现了加密算法的文件</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-28-1024x404.png\"></p>\n<p><strong>3，代码标签断点</strong></p>\n<p>右键点击登录事件，检查元素，查看登录的代码标签</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-29-1024x348.png\"></p>\n<p>将登录的标签添加断点，点击中断于属性修改</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-30-1024x551.png\"></p>\n<p>一但点击登录就会断点，能够查看某些数据</p>\n<p>缺点：有的网站可以这样使用</p>\n<p><strong>4，XHR 提交断点</strong></p>\n<p>先进行请求数据</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-31-1024x92.png\"></p>\n<p>抓到数据包后，查看类型是否为 xhr，查看 url，选择具有代表性的地址</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-32.png\"></p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-33.png\"></p>\n<p>在源代码页面中找到 XHR &#x2F; 提取断点，将地址输入进去，勾选内容，让浏览器去请求监控这个地址时进行断点</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-34.png\"></p>\n<p>点击登录，成功断点</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-35-1024x331.png\"></p>\n<p>通过此方法找到加密算法的文件</p>\n<h2 id=\"burp-插件-jsEncrypter\"><a href=\"#burp-插件-jsEncrypter\" class=\"headerlink\" title=\"burp 插件 - jsEncrypter\"></a>burp 插件 - jsEncrypter</h2><p>jsEncrypter：此插件使用 phantomjs 启动前端加密函数对数据进行加密，phantomjs 会返回加密结果传给 burp。因此此插件需要启动 phantomjs 开启服务，burp 去读取结果。</p>\n<p>需要下载 phantomjs，并且配置环境变量</p>\n<p>下载 jsEncrypte 插件后，在此文件中有 phantomjs_server.js，在此文件中需要将 web 中找到的加密算法的文件保存到本地，并写入此文件中，再编写要对数据加密的代码</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-25-203505.png\"></p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-38-1024x270.png\"></p>\n<p>payload 变量是在 burp 插件中写入的</p>\n<p>启动 phantomjs_server.js</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-36-1024x163.png\"></p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-37-1024x365.png\"></p>\n<p>成功</p>\n<p>用处：</p>\n<p>1，密码爆破：</p>\n<p>在 Intruder 中使用插件</p>\n<p>因为前端对密码进行了加密，但发现了加密算法的文件，使用此插件可对字典中的密码进行加密发送</p>\n<p>2，注入</p>\n<p>因为传入的数据会在请求包中被加密的，所以需要将注入的 payload 进行对应加密后传入参数</p>\n<p>比如 sql 注入 1234’ and 1&#x3D;1 — –</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87-40.png\"></p>\n<p>如果数据加密，那么注入的 payload 也需要对应加密，payload 才可以生效</p>\n","text":"Js逆向JS 分析调试：1，代码的全局搜索 通过数据包找到关键词，并搜索 2，文件流程断点 找到对应数据包 在发起程序中，显示了执行 js 的流程，从下往上执行...","permalink":"/post/JS逆向","photos":[],"count_time":{"symbolsCount":984,"symbolsTime":"1 mins."},"categories":[{"name":"Js安全","slug":"Js安全","count":1,"path":"api/categories/Js安全.json"}],"tags":[{"name":"Js安全","slug":"Js安全","count":1,"path":"api/tags/Js安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Js%E9%80%86%E5%90%91\"><span class=\"toc-text\">Js逆向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JS-%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%EF%BC%9A\"><span class=\"toc-text\">JS 分析调试：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#burp-%E6%8F%92%E4%BB%B6-jsEncrypter\"><span class=\"toc-text\">burp 插件 - jsEncrypter</span></a></li></ol></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"PHP-反序列化","uid":"ac5ba92b195ea22428b99b3d70a46fa1","slug":"PHP-反序列化","date":"2025-05-17T08:10:22.090Z","updated":"2025-05-17T08:37:30.224Z","comments":true,"path":"api/articles/PHP-反序列化.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/fcb0635d92f79ea826b197540ffc8cbc.jpg","text":"PHP-反序列化在 PHP 里，序列化是把一个对象或数组转换成字符串的过程（比如保存到文件或传输到网络），而反序列化就是把这个字符串还原成原来的变量（对象 / ...","permalink":"/post/PHP-反序列化","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"PHP安全","slug":"PHP安全","count":1,"path":"api/categories/PHP安全.json"}],"tags":[{"name":"PHP安全","slug":"PHP安全","count":1,"path":"api/tags/PHP安全.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}},"next_post":{"title":"Java安全-反序列化","uid":"834d897a9474839bf32abbfb577a6009","slug":"Java安全-反序列化","date":"2025-05-17T07:23:49.990Z","updated":"2025-05-17T07:44:50.053Z","comments":true,"path":"api/articles/Java安全-反序列化.json","keywords":null,"cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/%23march7%20%23m7%20%23honkaistarrail%20%23hsr.jpg","text":"Java安全-反序列化Java 安全 - 反序列化 - 原生序列化类函数序列化是将 Java 对象转换成字节流的过程。而反序列化是将字节流转换成 Java 对象...","permalink":"/post/Java安全-反序列化","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java安全","slug":"Java安全","count":4,"path":"api/tags/Java安全.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}}}